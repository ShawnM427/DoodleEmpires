<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DoodleEmpires</name>
    </assembly>
    <members>
        <member name="T:DoodleEmpires.Engine.Campaign.Campaign">
            <summary>
            Represents the main class for a campain
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Campaign.CutScene">
            <summary>
            Represents a cutscene as part of a campaign
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.Resources">
            <summary>
            Represents an amount of resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Food">
            <summary>
            The amount of food in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Wood">
            <summary>
            The amount of wood in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Gold">
            <summary>
            The amount of gold in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Dirt">
            <summary>
            The amount of dirt in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Stone">
            <summary>
            The amount of stone in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Coal">
            <summary>
            The amount of coal in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Limestone">
            <summary>
            The amount of iron in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Iron">
            <summary>
            The amount of limestone in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Uranium">
            <summary>
            The amount of uranium in this resource pile
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Resources.Doodolium">
            <summary>
            The amount of doodolium in this resource pile
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.TechNode">
            <summary>
            Represents a node in a tech tree
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Economy.TechNode.None">
            <summary>
            Represents an empty tech node, such as the root node of a tech tree
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.TechNode.#ctor(System.String,System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a new tech node
            </summary>
            <param name="name">The name for this node</param>
            <param name="description">The description for this node</param>
            <param name="icon">The icon for this node</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.TechNode.Name">
            <summary>
            Gets the name of this tech node
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.TechNode.Description">
            <summary>
            Gets the description for this node
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.TechNode.Icon">
            <summary>
            Gets the icon of this tech node
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.TechTree">
            <summary>
            Represents a branching tech tree
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.EconomyBuff">
            <summary>
            Represents buffs for an economy
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.EconomyBuff.GetBlankBuff">
            <summary>
            Creates a new blank economy buff
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.EconomyBuff.op_Addition(DoodleEmpires.Engine.Economy.EconomyBuff,DoodleEmpires.Engine.Economy.EconomyBuff)">
            <summary>
            Handles adding two economy bufs together
            </summary>
            <param name="a">The first economy buff</param>
            <param name="b">The second economy buff</param>
            <returns>The sum of the two buffs</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.EconomyBuff.op_Subtraction(DoodleEmpires.Engine.Economy.EconomyBuff,DoodleEmpires.Engine.Economy.EconomyBuff)">
            <summary>
            Handles subtracting two economy bufs together
            </summary>
            <param name="a">The first economy buff</param>
            <param name="b">The second economy buff</param>
            <returns>The difference of the two buffs</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.EconomyBuff.op_Multiply(DoodleEmpires.Engine.Economy.EconomyBuff,System.Single)">
            <summary>
            Handles multiplying an economy buff by a value
            </summary>
            <param name="a">The first economy buff</param>
            <param name="b">The value to multiply by</param>
            <returns>The product of the buff</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.EconomyBuff.op_Division(DoodleEmpires.Engine.Economy.EconomyBuff,System.Single)">
            <summary>
            Handles dividing an economy buff by a value
            </summary>
            <param name="a">The first economy buff</param>
            <param name="b">The value to multiply by</param>
            <returns>The quotient of the buff</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.PopulationCapRelative">
            <summary>
            Gets or sets the relative population increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.StockpileRelative">
            <summary>
            Gets or sets the relative stockpile size increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.ResourceRateRelative">
            <summary>
            Gets or sets the relative resource per second increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.PopulationCapMultiplier">
            <summary>
            Gets or sets the relative population increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.StockpileMultiplier">
            <summary>
            Gets or sets the relative stockpile size increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.ResourceRateMultiplier">
            <summary>
            Gets or sets the relative resource per second increase/decsrease caused by this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.EconomyBuff.Empty">
            <summary>
            Gets an empty unit buff
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.ZoneManager">
            <summary>
            Manages zone types
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.ObjectManager`1">
            <summary>
            Represents a class for handling named objects
            </summary>
            <typeparam name="T">The type of objects to handle</typeparam>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.ObjectManager`1._items">
            <summary>
            The internal list of items
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.ObjectManager`1._zookUp">
            <summary>
            The internal lookup dictionary to use
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.ObjectManager`1.Add(System.String,`0)">
            <summary>
            Gets the object with the given ID
            </summary>
            <param name="name">The name of object to add</param>
            <param name="item">The item to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.ObjectManager`1.Get(System.String)">
            <summary>
            Gets the object with the given ID
            </summary>
            <param name="name">The name of the object</param>
            <returns>The item with the given ID, or the default object for the type</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.ObjectManager`1.Get(System.Int32)">
            <summary>
            Gets the object with the given ID
            </summary>
            <param name="id">The ID of the object</param>
            <returns>The item with the given ID, or the default object for the type</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.ObjectManager`1.GetID(System.String)">
            <summary>
            Gets the ID of the object with the given name
            </summary>
            <param name="name">The name to search for</param>
            <returns>The ID, or -1 if an item with that name does not exist</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.ObjectManager`1.Items">
            <summary>
            Gets the list of items handled by this manager
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.ZoneManager.Add(System.String,DoodleEmpires.Engine.Economy.ZoneInfo)">
            <summary>
            Adds a new zone type to this manager
            </summary>
            <param name="name">The name of the zone to add</param>
            <param name="item">The zone info</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.GlobalZoneManager">
            <summary>
            A static class for handling zonings
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.GlobalZoneManager.#cctor">
            <summary>
            Initializes the static zone manager
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.GlobalZoneManager.Manager">
            <summary>
            Gets the internal zone manager
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.AI.AIHandler">
            <summary>
            The bas class for AI handlers
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIHandler._entity">
            <summary>
            The entity to apply this AI handler to
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIHandler._target">
            <summary>
            The entities target position
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.AIHandler.#ctor(DoodleEmpires.Engine.Entities.Entity)">
            <summary>
            Creates a new AI Handler
            </summary>
            <param name="entity">The entity to handle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.AIHandler.Update(DoodleEmpires.Engine.Terrain.VoxelMap,System.Double)">
            <summary>
            Updates this AI handler
            </summary>
            <param name="map">The current map</param>
            <param name="elapsedMS">The time in milliseconds since the last update</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.AI.AIHandler.Target">
            <summary>
            Gets or sets this AI's target position
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.AI.AIState`1">
            <summary>
            A generic class representing the current status of an AI
            </summary>
            <typeparam name="T">The AI tag data type</typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.AIState`1.#ctor">
            <summary>
            Creates a new blank AI state
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.AI.AIState`1.AITag">
            <summary>
            Gets or sets the current AI tag
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.AI.AIState`1.Status">
            <summary>
            Gets or sets the current AI status
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.AI.AITag">
            <summary>
            A basic tag for using with AIState
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.AITag.#ctor">
            <summary>
            Creates a new blank AI tag
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.AI.AITag.Target">
            <summary>
            Gets or sets the target position
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.AI.AIStatus">
            <summary>
            Represents the status of an AI
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIStatus.Attack">
            <summary>
            The AI's current goal is to attack the position
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIStatus.Defend">
            <summary>
            The AI's current goal is to defend the position
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIStatus.Hide">
            <summary>
            The AI's current goal is to hide somewhere
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.AI.AIStatus.Wander">
            <summary>
            The AI's current goal is to wander around aimlessly
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.AI.BasicAI">
            <summary>
            A basic AI handler
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.BasicAI.#ctor(DoodleEmpires.Engine.Entities.Entity)">
            <summary>
            Creates a new basic AI handler
            </summary>
            <param name="entity">The entity to handle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.AI.BasicAI.Update(DoodleEmpires.Engine.Terrain.VoxelMap,System.Double)">
            <summary>
            Updates this AI handler
            </summary>
            <param name="map">The current map</param>
            <param name="elapsedMS">The time in milliseconds since the last update</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.EntityManager">
            <summary>
            Represents an entity manager
            </summary> 
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.EntityManager.#ctor">
            <summary>
            Creates a new entity manager
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.IFocusable">
            <summary>
            Represents an object which a 2D camera can focus on
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.IFocusable.Position">
            <summary>
            Gets the position of the focusable object
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.Entity">
            <summary>
            The base class for all world entities
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.Entity.#ctor">
            <summary>
            Creates a new entity
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.Entity.Position">
            <summary>
            Gets or sets the position of this entity
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Utils.Pair`2">
            <summary>
            Represents an object with 2 items
            </summary>
            <typeparam name="T">The type of the first item</typeparam>
            <typeparam name="U">The type of the second item</typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.Pair`2.#ctor">
            <summary>
            Creates a new blank pair
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.Pair`2.#ctor(`0,`1)">
            <summary>
            Creates a new pair
            </summary>
            <param name="iFirst">The first item</param>
            <param name="iSecond">The second item</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.Pair`2.first">
            <summary>
            Gets or sets the first item
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.Pair`2.second">
            <summary>
            Gets or sets the second item
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1">
            <summary>
            Represents a queue where items are sorted into a "priority" list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.#ctor">
            <summary>
            Creates a new priority queue
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="queueItem">The item to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Clear">
            <summary>
            Clears this queue
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the first item in the queue
            </summary>
            <returns>The first item in the queue</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Peek">
            <summary>
            Returns the first item in the queue without removing it
            </summary>
            <returns>The first item in the queue</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Contains(`0)">
            <summary>
            Checks if this queue contans an item
            </summary>
            <param name="queueItem">The item to search for</param>
            <returns>True if the queue contains th item</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.PriorityQueue`1.Count">
            <summary>
            Gets the number of instances in this queue
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Utils.SingletonHolder`1">
            <summary>
            Represents an object that cotains a default of an object
            </summary>
            <typeparam name="T">The type of instance to hold</typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.SingletonHolder`1.#ctor">
            <summary>
            Creates a new singleton holder
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.SingletonHolder`1.Instance">
            <summary>
            Gets the default instance for this singleton
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3">
            <summary>
            Represents an object with 3 items
            </summary>
            <typeparam name="T">The type of the first item</typeparam>
            <typeparam name="U">The type of the second item</typeparam>
            <typeparam name="V">The type of the third item</typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3.#ctor">
            <summary>
            Creates a new blank triple
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a new instance of a triple
            </summary>
            <param name="iFirst">The first item</param>
            <param name="iSecond">The second item</param>
            <param name="iThird">The third item</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3.first">
            <summary>
            Gets or sets the first item in this triple
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3.second">
            <summary>
            Gets or sets the second item in this triple
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.Utils.Triple`3.third">
            <summary>
            Gets or sets the third item in this triple
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Utils.Util">
            <summary>
            Some basic utilities
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Utils.Util.Random">
            <summary>
            Gets a random number between 0 and 1.0
            </summary>
            <returns></returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.GridPos">
            <summary>
            Represents a position within a grid
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridPos.x">
            <summary>
            The x coord of this position
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridPos.y">
            <summary>
            The y coord of this position
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new grid position
            </summary>
            <param name="iX">The x coord of the position</param>
            <param name="iY">The y coord of the position</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.GetHashCode">
            <summary>
            Gets a semi-unique hash code for this position
            </summary>
            <returns>A semi-unique integer</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.Equals(System.Object)">
            <summary>
            Checks if this position is equal to another object
            </summary>
            <param name="obj">The object to check against</param>
            <returns>True if this is equal to <i>obj</i></returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.Equals(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Checks if this position is equal to another position
            </summary>
            <param name="p">The position to check against</param>
            <returns>True if this is equal to <i>p</i></returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.op_Equality(DoodleEmpires.Engine.Entities.PathFinder.GridPos,DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Checks if two grid positions are equal
            </summary>
            <param name="a">The first position</param>
            <param name="b">The second position</param>
            <returns>True if <i>a</i> and <i>b</i> are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.op_Inequality(DoodleEmpires.Engine.Entities.PathFinder.GridPos,DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Checks if two grid positions are inequal
            </summary>
            <param name="a">The first position</param>
            <param name="b">The second position</param>
            <returns>True if <i>a</i> and <i>b</i> are not equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridPos.Set(System.Int32,System.Int32)">
            <summary>
            Sets this position's values to those given
            </summary>
            <param name="iX">The x coord of the position</param>
            <param name="iY">The y coord of the position</param>
            <returns>This position, with the modified values</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.GridRect">
            <summary>
            A basic implementation of a rectangle class
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridRect.minX">
            <summary>
            The minumum x of this grid rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridRect.minY">
            <summary>
            The minumum y of this grid rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridRect.maxX">
            <summary>
            The maximum x of this grid rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.GridRect.maxY">
            <summary>
            The maximum y of this grid rectangle
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new grid rectangle
            </summary>
            <param name="iMinX">The minimum x coord</param>
            <param name="iMinY">The minimum y cood</param>
            <param name="iMaxX">The maximum x coord</param>
            <param name="iMaxY">The maxiumum y coord</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.GetHashCode">
            <summary>
            Gets a semi-unique hash cod for this object
            </summary>
            <returns>A semi-unique integer for this object</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.Equals(System.Object)">
            <summary>
            Checks equality between this object and another
            </summary>
            <param name="obj">The object to check against</param>
            <returns>True if this object is equal to the other object</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.Equals(DoodleEmpires.Engine.Entities.PathFinder.GridRect)">
            <summary>
            Checks if this rectangle is equal to another
            </summary>
            <param name="p">The rectangle to check against</param>
            <returns>True if this is equal to <i>p</i></returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.op_Equality(DoodleEmpires.Engine.Entities.PathFinder.GridRect,DoodleEmpires.Engine.Entities.PathFinder.GridRect)">
            <summary>
            Checks if two rectangles are equal
            </summary>
            <param name="a">The first rectangle</param>
            <param name="b">The second rectangle</param>
            <returns>True if <i>a</i> and <i>b</i> are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.op_Inequality(DoodleEmpires.Engine.Entities.PathFinder.GridRect,DoodleEmpires.Engine.Entities.PathFinder.GridRect)">
            <summary>
            Checks if two rectangles are inequal
            </summary>
            <param name="a">The first rectangle</param>
            <param name="b">The second rectangle</param>
            <returns>True if <i>a</i> and <i>b</i> are not equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.op_Implicit(Microsoft.Xna.Framework.Rectangle)~DoodleEmpires.Engine.Entities.PathFinder.GridRect">
            <summary>
            Converts an XNA rectangle to a GridRect
            </summary>
            <param name="xnaRect">The xna rectangle to create a grid rectangle from</param>
            <returns>A GridRect with the same values as the XNA rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.GridRect.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all values in this rectangle to the given ones
            </summary>
            <param name="iMinX">The minimum x coord</param>
            <param name="iMinY">The minimum y cood</param>
            <param name="iMaxX">The maximum x coord</param>
            <param name="iMaxY">The maxiumum y coord</param>
            <returns>This rectangle with given modifications</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Node">
            <summary>
            Represents a node in a pathfinding grid
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.x">
            <summary>
            The x coord of this node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.y">
            <summary>
            The y coord of this node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.walkable">
            <summary>
            Whether or not the node is walkable
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.heuristicStartToEndLen">
            <summary>
            The heuristics-based length from this node to the end node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.startToCurNodeLen">
            <summary>
            The length from this node to the end node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.heuristicCurNodeToEndLen">
            <summary>
            The length from this node to the goal node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.isOpened">
            <summary>
            Whether this node has been opened
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.isClosed">
            <summary>
            Whether this node has been closed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.Node.parent">
            <summary>
            The parent node
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.#ctor(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Creates a new pathfinding node
            </summary>
            <param name="iX">The x coord of this node</param>
            <param name="iY">The y coord of this node</param>
            <param name="iWalkable">True if this node is walkable</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.Reset(System.Nullable{System.Boolean})">
            <summary>
            Resets this node
            </summary>
            <param name="iWalkable">Whether or not this not is walkable</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.CompareTo(System.Object)">
            <summary>
            Compares this object to another for sorting
            </summary>
            <param name="iObj">The object to compare to</param>
            <returns>A value representing which instance is a shorter distance</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.Backtrace(DoodleEmpires.Engine.Entities.PathFinder.Node)">
            <summary>
            Perfoms a back tracing algorithm on a node
            </summary>
            <param name="iNode">The node to trace</param>
            <returns>A list of grid positions that represents the path to the node</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.GetHashCode">
            <summary>
            Gets a hash code for this node
            </summary>
            <returns>A unique hash code for this node</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.Equals(System.Object)">
            <summary>
            Checks if this node is equal to another object
            </summary>
            <param name="obj">The object to check equality against</param>
            <returns>True if this item is equal to the given object</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.Equals(DoodleEmpires.Engine.Entities.PathFinder.Node)">
            <summary>
            Checks if this node is equal to another node
            </summary>
            <param name="p">The node to check against</param>
            <returns>True if these nodes are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.op_Equality(DoodleEmpires.Engine.Entities.PathFinder.Node,DoodleEmpires.Engine.Entities.PathFinder.Node)">
            <summary>
            Checks if two nodes are equal
            </summary>
            <param name="a">The first node to check</param>
            <param name="b">The second node to check</param>
            <returns>True if these nodes are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Node.op_Inequality(DoodleEmpires.Engine.Entities.PathFinder.Node,DoodleEmpires.Engine.Entities.PathFinder.Node)">
            <summary>
            Checks if two nodes are not equal
            </summary>
            <param name="a">The first node to check</param>
            <param name="b">The second node to check</param>
            <returns>True if these nodes are not equal</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid">
            <summary>
            The base class for node grids
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.#ctor">
            <summary>
            Creates a new base grid
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.m_gridRect">
            <summary>
            The grid rectangle for this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.IsWalkableAt(System.Int32,System.Int32)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.SetWalkableAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">Whether to node is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.GetNodeAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iPos">The position to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.IsWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.SetWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to set</param>
            <param name="iWalkable">Whether the node at the position is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.GetNeighbors(DoodleEmpires.Engine.Entities.PathFinder.Node,System.Boolean,System.Boolean)">
            <summary>
            Gets the neighbors of a given node
            </summary>
            <param name="iNode">The node to get the neighbors for</param>
            <param name="iCrossCorners">True if corners should be counted</param>
            <param name="iCrossAdjacentPoint">True if one adjacent side must be free to enter a corner</param>
            <returns>The node's neighbors</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.Reset">
            <summary>
            Resets this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.Clone">
            <summary>
            Creates a clone of this grid
            </summary>
            <returns>A clone of this grid</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.gridRect">
            <summary>
            Gets the grid rectangle for this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.Width">
            <summary>
            Gets the width of this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.BaseGrid.Height">
            <summary>
            Gets the height of this grid
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid">
            <summary>
            A dynamic pathfinding grid
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.m_nodes">
            <summary>
            A dictionary containing all non-null nodes
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.#ctor(System.Collections.Generic.List{DoodleEmpires.Engine.Entities.PathFinder.GridPos})">
            <summary>
            Creates a new dynamic grid
            </summary>
            <param name="iWalkableGridList">A list of all walkable positions</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.buildNodes(System.Collections.Generic.List{DoodleEmpires.Engine.Entities.PathFinder.GridPos})">
            <summary>
            Builds the nodes from a list of walkable points
            </summary>
            <param name="iWalkableGridList">A list of walkable grid coords</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.IsWalkableAt(System.Int32,System.Int32)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.SetWalkableAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">Whether to node is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.GetNodeAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iPos">The position to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.IsWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.SetWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to set</param>
            <param name="iWalkable">Whether the node at the position is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.Reset">
            <summary>
            Resets this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.Reset(System.Collections.Generic.List{DoodleEmpires.Engine.Entities.PathFinder.GridPos})">
            <summary>
            Resets this grid using a list of walkable points
            </summary>
            <param name="iWalkableGridList">A list of walkable positions</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.Clone">
            <summary>
            Creates a clone of this grid
            </summary>
            <returns>A duplicate of this grid</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.Width">
            <summary>
            Gets the width of this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.DynamicGrid.Height">
            <summary>
            Gets the height of this grid
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool">
            <summary>
            Represents a dynamic search grid that uses a node pool
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.#ctor(DoodleEmpires.Engine.Entities.PathFinder.NodePool)">
            <summary>
            Creates a new dynamic grid with a node pool
            </summary>
            <param name="iNodePool">The node pool to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.IsWalkableAt(System.Int32,System.Int32)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.SetWalkableAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">Whether to node is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.GetNodeAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iPos">The position to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.IsWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.SetWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to set</param>
            <param name="iWalkable">Whether the node at the position is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.Reset">
            <summary>
            Resets this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.Clone">
            <summary>
            Creates a clone of this grid
            </summary>
            <returns>A clone of this grid</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.Width">
            <summary>
            Gets the width of this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.DynamicGridWPool.Height">
            <summary>
            Gets the height of this grid
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool">
            <summary>
            Represents a search grid that uses a node pool
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.#ctor(DoodleEmpires.Engine.Entities.PathFinder.NodePool,System.Nullable{DoodleEmpires.Engine.Entities.PathFinder.GridRect})">
            <summary>
            Creates a new partial grid with a node pool
            </summary>
            <param name="iNodePool">The node pool to use</param>
            <param name="iGridRect">The rectangle representing the grids bounds</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.SetGridRect(DoodleEmpires.Engine.Entities.PathFinder.GridRect)">
            <summary>
            Sets the grids bounds
            </summary>
            <param name="iGridRect">The new bounds to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.IsInside(System.Int32,System.Int32)">
            <summary>
            Checks if a point is within this grid's bounds
            </summary>
            <param name="iX">The x coord to check</param>
            <param name="iY">The y coord to check</param>
            <returns>True if [iX, iY] is inside this grid</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.IsInside(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Checks if a point is within this grid's bounds
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if <i>iPos</i> is inside this grid</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.IsWalkableAt(System.Int32,System.Int32)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.SetWalkableAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">Whether to node is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.GetNodeAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iPos">The position to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.IsWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.SetWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to set</param>
            <param name="iWalkable">Whether the node at the position is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.Reset">
            <summary>
            Resets this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.Clone">
            <summary>
            Creates a clone of this grid
            </summary>
            <returns>A clone of this grid</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.Width">
            <summary>
            Gets the width of this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.PartialGridWPool.Height">
            <summary>
            Gets the height of this grid
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid">
            <summary>
            Represents a non-dynamic navigation grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.#ctor(System.Int32,System.Int32,System.Boolean[][])">
            <summary>
            Creates a new static grid
            </summary>
            <param name="iWidth">The width of the grid</param>
            <param name="iHeight">The height of the grid</param>
            <param name="iMatrix">The walkable matrix to apply to this map</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.buildNodes(System.Int32,System.Int32,System.Boolean[][])">
            <summary>
            Builds all the nodes for this map
            </summary>
            <param name="iWidth">The width of the map</param>
            <param name="iHeight">The height of the map</param>
            <param name="iMatrix">The walkable matrix to apply to this map</param>
            <returns>A collection of nodes</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.IsWalkableAt(System.Int32,System.Int32)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to get</param>
            <param name="iY">The y coord to get</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.isInside(System.Int32,System.Int32)">
            <summary>
            Checks whether the given coordinate is inside of this map
            </summary>
            <param name="iX">The x coord to check</param>
            <param name="iY">The y coord to check</param>
            <returns>True if the coordinate is within this map</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.SetWalkableAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">Whether to node is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.isInside(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Checks whether the given coordinate is inside of this map
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the coordinate is within this map</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.GetNodeAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given co-ordinates
            </summary>
            <param name="iPos">The position to get</param>
            <returns>The node at the given position</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.IsWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to check</param>
            <returns>True if the node at the position is walkable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.SetWalkableAt(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean)">
            <summary>
            Sets whether the node at the given co-ordinates is walkable
            </summary>
            <param name="iPos">The position to set</param>
            <param name="iWalkable">Whether the node at the position is walkable</param>
            <returns>The sucess of the operation</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.Reset">
            <summary>
            Resets this grid
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.Reset(System.Boolean[][])">
            <summary>
            Resets this grid with the given walkable matrix
            </summary>
            <param name="iMatrix">The matrix of walkable positions</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.Clone">
            <summary>
            Creates a clone of this grid
            </summary>
            <returns>A clone of this grid</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.Width">
            <summary>
            Gets the width of this grid
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.StaticGrid.Height">
            <summary>
            Gets the height of this grid
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode">
            <summary>
            The Heuristic to use to find the length of the path
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode.MANHATTAN">
            <summary>
            Simply sums the x and y components
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode.EUCLIDEAN">
            <summary>
            Uses a square root to measure accurate distance
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode.CHEBYSHEV">
            <summary>
            Gets the maximum of the x or y
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.Heuristic">
            <summary>
            Implementations of heuristic methods
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Heuristic.Manhattan(System.Int32,System.Int32)">
            <summary>
            Find manhattan distance
            </summary>
            <param name="iDx">The x coord</param>
            <param name="iDy">The y coord</param>
            <returns>A relative distance</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Heuristic.Euclidean(System.Int32,System.Int32)">
            <summary>
            Find euclidean distance
            </summary>
            <param name="iDx">The x coord</param>
            <param name="iDy">The y coord</param>
            <returns>A relative distance</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.Heuristic.Chebyshev(System.Int32,System.Int32)">
            <summary>
            Find Chebyshev distance
            </summary>
            <param name="iDx">The x coord</param>
            <param name="iDy">The y coord</param>
            <returns>A relative distance</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.HeuristicDelegate">
            <summary>
            The delagate to use for finding distance
            </summary>
            <param name="iDx">The x coord</param>
            <param name="iDy">The y coord</param>
            <returns>A hueristic distance</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam">
            <summary>
            Represents the parameters fed into a jump point search
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.#ctor(DoodleEmpires.Engine.Entities.PathFinder.BaseGrid,DoodleEmpires.Engine.Entities.PathFinder.GridPos,DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Boolean,System.Boolean,System.Boolean,DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode)">
            <summary>
            Creates a new set of search parameters
            </summary>
            <param name="iGrid">The grid to search</param>
            <param name="iStartPos">The starting position to search from</param>
            <param name="iEndPos">The ending position to search to</param>
            <param name="iAllowEndNodeUnWalkable">True if the end node can be unwalkable</param>
            <param name="iCrossCorner">True if the search can cross corners</param>
            <param name="iCrossAdjacentPoint">True if an adjacent node needs to be opened to allow a corner</param>
            <param name="iMode">The heuristic mode to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.#ctor(DoodleEmpires.Engine.Entities.PathFinder.BaseGrid,System.Boolean,System.Boolean,System.Boolean,DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode)">
            <summary>
            Creates a new set of search parameters
            </summary>
            <param name="iGrid">The grid to search</param>
            <param name="iAllowEndNodeUnWalkable">True if the end node can be unwalkable</param>
            <param name="iCrossCorner">True if the search can cross corners</param>
            <param name="iCrossAdjacentPoint">True if an adjacent node needs to be opened to allow a corner</param>
            <param name="iMode">The heuristic mode to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.SetHeuristic(DoodleEmpires.Engine.Entities.PathFinder.HeuristicMode)">
            <summary>
            Sets the heuristic to use
            </summary>
            <param name="iMode">The heuristic mode to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.Reset(DoodleEmpires.Engine.Entities.PathFinder.GridPos,DoodleEmpires.Engine.Entities.PathFinder.GridPos,DoodleEmpires.Engine.Entities.PathFinder.BaseGrid)">
            <summary>
            Resets this search
            </summary>
            <param name="iStartPos">The new starting position to use</param>
            <param name="iEndPos">The new end position to use</param>
            <param name="iSearchGrid">The new grid to use, or null to use the old grid</param>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_heuristic">
            <summary>
            The heuristic to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_crossAdjacentPoint">
            <summary>
            True if an adjacent node needs to be open in order to cross a corner
            </summary>
            <example>
            -------------
            | x | x | t |
            -------------
            | x | s | x |
            -------------
            | x | x | x |
            -------------
            where x is closed, s is start and t is open.
            
            If false, this would return t as a valid walking point,
            if true, either the top middle or the left middle would
            need to be open
            </example>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_crossCorner">
            <summary>
            True if this search can cross corners
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_allowEndNodeUnWalkable">
            <summary>
            True if the end node can be unwalkable
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_useRecursive">
            <summary>
            True if this search should use recursion instead of a loop
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_searchGrid">
            <summary>
            The grid to search
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_startNode">
            <summary>
            The starting node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.m_endNode">
            <summary>
            The ending node
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.openList">
            <summary>
            A list of all open nodes
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.CrossAdjacentPoint">
            <summary>
            Gets or sets whether an adjacent node needs to be open in order to cross a corner
            </summary>
            <example>
            -------------
            | x | x | t |
            -------------
            | x | s | x |
            -------------
            | x | x | x |
            -------------
            where x is closed, s is start and t is open.
            
            If false, this would return t as a valid walking point,
            if true, either the top middle or the left middle would
            need to be open
            </example>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.CrossCorner">
            <summary>
            Gets or sets whether the search can cross corners
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.AllowEndNodeUnWalkable">
            <summary>
            Gets or sets whether the search allows for the end node to be unwalkable
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.HeuristicFunc">
            <summary>
            Gets the heuristic being used
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.SearchGrid">
            <summary>
            Gets the grid that the search is being applied to
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.StartNode">
            <summary>
            Gets the starting node
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.EndNode">
            <summary>
            Gets the end node
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam.UseRecursive">
            <summary>
            Gets or sets whether this search uses recursion
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.JumpPointFinder">
            <summary>
            Performs a jump point search
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.JumpPointFinder.FindPath(DoodleEmpires.Engine.Entities.PathFinder.JumpPointParam)">
            <summary>
            Finds a path using the given parameters
            </summary>
            <param name="iParam">The input parameters to use</param>
            <returns>A list of grid positions representing a path</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.PathFinder.NodePool">
            <summary>
            Represents a collection of nodes that internally uses a dictionary
            with GridPos as the lookup
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.PathFinder.NodePool.m_nodes">
            <summary>
            The internal dictionary of nodes
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.#ctor">
            <summary>
            Creates a new node pool
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.GetNode(System.Int32,System.Int32)">
            <summary>
            Gets the node at the given x and y coords
            </summary>
            <param name="iX">The x coord to find</param>
            <param name="iY">The y coord to find</param>
            <returns>The node at [x, y], or null if none exists</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.GetNode(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Gets the node at the given coords
            </summary>
            <param name="iPos">The position to get the node at</param>
            <returns>The node at <i>iPos</i>, or null if none exists</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.SetNode(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Sets whether the node at the coords is walkable, or has an unkown state
            </summary>
            <param name="iX">The x coord to set</param>
            <param name="iY">The y coord to set</param>
            <param name="iWalkable">True if walkable, or null if unkown</param>
            <returns>The node that has been set</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.SetNode(DoodleEmpires.Engine.Entities.PathFinder.GridPos,System.Nullable{System.Boolean})">
            <summary>
            Sets whether the node at the coords is walkable, or has an unkown state
            </summary>
            <param name="iPos">The coords to set</param>
            <param name="iWalkable">True if walkable, or null if unkown</param>
            <returns>The node that has been set</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.removeNode(System.Int32,System.Int32)">
            <summary>
            Removes a node from this node pool
            </summary>
            <param name="iX">The x coord to remove at</param>
            <param name="iY">The y coord to remove at</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.PathFinder.NodePool.removeNode(DoodleEmpires.Engine.Entities.PathFinder.GridPos)">
            <summary>
            Removes a node from this node pool
            </summary>
            <param name="iPos">The coords to remove at</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.PathFinder.NodePool.Nodes">
            <summary>
            Gets the dictionary of nodes in this pool
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.UnitBuff">
            <summary>
            Represents buffs on a unit to increase or decrease properties
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.UnitBuff.GetBlankBuff">
            <summary>
            Creates a new blank unit buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.ArmorMultiplier">
            <summary>
            Gets or sets the armor multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.HealthMultiplier">
            <summary>
            Gets or sets the health multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.RegenMultiplier">
            <summary>
            Gets or sets the health regeneration multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.SpeedMultiplier">
            <summary>
            Gets or sets the speed multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.FireRateMultiplier">
            <summary>
            Gets or sets the firing rate multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.AmmoRegenMultiplier">
            <summary>
            Gets or sets the ammo regeneration multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.ConstructionMultiplier">
            <summary>
            Gets or sets the construction speed multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.HarvestingMultiplier">
            <summary>
            Gets or sets the haversting speed multiplier for this buff
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitBuff.Empty">
            <summary>
            Gets an empty unit buff
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.Zoning">
            <summary>
            Represents a zone that applies unit buffs and allows new tech options
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.Zoning.#ctor(Microsoft.Xna.Framework.Rectangle,System.Byte,DoodleEmpires.Engine.Economy.ZoneInfo)">
            <summary>
            Creates a new zone
            </summary>
            <param name="bounds">The bounds of the zone</param>
            <param name="playerID">The ID of the player to bind to</param>
            <param name="info">The zone info to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.Zoning.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes basic zone data to stream (TODO Actually save zone info)
            </summary>
            <param name="writer">The stream to write to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.Zoning.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Reads basic zone data from stream (TODO Actually load zone info)
            </summary>
            <param name="reader">The stream to read from</param>
            <returns>A basic zone loaded from teh memory stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.Zoning.WriteToPacket(Lidgren.Network.NetOutgoingMessage)">
            <summary>
            Writes this zone to an outgoing packet, DOES NOT WRITE PACKET HEADER
            </summary>
            <param name="msg">The packet to write to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.Zoning.ReadFromPacket(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Reads a zone from an incoming packet, DOES NOT READ PACKET HEADER
            </summary>
            <param name="msg">The packet to parse</param>
            <returns>A zone read from the packet</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Zoning.Bounds">
            <summary>
            Gets or sets the bounds for this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Zoning.TotalEconomyBuff">
            <summary>
            Gets the total economy buff for this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Zoning.Info">
            <summary>
            Gets the zoning information about this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.Zoning.PlayerID">
            <summary>
            Gets the ID of the player associated with this zone
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Economy.ZoneInfo">
            <summary>
            Represents information about a zone
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Economy.ZoneInfo.#ctor(Microsoft.Xna.Framework.Color,System.String)">
            <summary>
            Creates a new zoning info
            </summary>
            <param name="color">The color of the zone</param>
            <param name="name">The name of the zone</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.Color">
            <summary>
            Gets the color for this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.FreindlyBuff">
            <summary>
            Gets the buff for freindly units in this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.EnemyBuff">
            <summary>
            Gets the buff for enemy units in this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.RequiredTechNode">
            <summary>
            Gets or sets the tech node required to create this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.TechUnlocks">
            <summary>
            Gets a list of tech unlocks that placing this zone grants
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.EconomyBuff">
            <summary>
            Gets the per-tile economy buff for this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.Name">
            <summary>
            Gets the name of this zone
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Economy.ZoneInfo.ZoneID">
            <summary>
            Gets or sets the ID of this zone
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.UnitState">
            <summary>
            Represents the state of a single unit
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.UnitState.#ctor(System.Byte,System.Single)">
            <summary>
            Creates a new unit state
            </summary>
            <param name="teamID">The team ID for this unit</param>
            <param name="hp">The starting HP of this unit</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.Position">
            <summary>
            Gets or sets the position of this unit
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.X">
            <summary>
            Gets or sets the x coord of this unit
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.Y">
            <summary>
            Gets or sets the y coord of this unit
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.HP">
            <summary>
            Gets or sets this unit state's health
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.TeamID">
            <summary>
            Gets or sets the team ID for this unit state
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.UnitState.Stance">
            <summary>
            Gets or sets this unit's status
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.UnitStatus">
            <summary>
            Represents the status of a unit
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.None">
            <summary>
            This unit has no special status, something went wrong
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Standing">
            <summary>
            This unit is currently standing
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Walking">
            <summary>
            This unit is currently walking
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Hiding">
            <summary>
            This unit is currently hiding
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Climbing">
            <summary>
            This unit is currently climbing
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Attacking">
            <summary>
            This unit is currently attacking
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Defending">
            <summary>
            This unit is currently defending itself
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Reloading">
            <summary>
            This unit is currently reloading
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Dying">
            <summary>
            This unit is in the process of dying
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.UnitStatus.Dead">
            <summary>
            This unit is dead
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.FoundServerEvent">
            <summary>
            Called when a new server has been found
            </summary>
            <param name="serverInfo">The server's info</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.PlayerJoinedEvent">
            <summary>
            Called when a player has joined a server
            </summary>
            <param name="serverInfo">The player's info</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.PlayerLeftEvent">
            <summary>
            Called when a player has left a server
            </summary>
            <param name="serverInfo">The player's info</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.TerrainSetEvent">
            <summary>
            Called when a terrain block's ID has been set
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <param name="ID">The ID of the tile</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.JoinedServerEvent">
            <summary>
            Called by a client when it joins a server
            </summary>
            <param name="info">The server's information</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ServerConnectionFailed">
            <summary>
            Called when a client has failed to connect to a server
            </summary>
            <param name="reason">The reason for failure</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ZoneAddedEvent">
            <summary>
            Called when a zone is added to the world
            </summary>
            <param name="zone">The zone being added</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ZoneRemovedEvent">
            <summary>
            Called when a zone is removed from the world
            </summary>
            <param name="zone">The zone being removed</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.GlobalNetVars">
            <summary>
            A collection of global networking constants
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.DEFAULT_PORT">
            <summary>
            The default port for servers to bind to
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.MASTER_SERVER_PORT">
            <summary>
            The port of the master server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.MASTER_SERVER_IP">
            <summary>
            A string representation of the master server's IP adress
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.MIN_PORT">
            <summary>
            The minimum port
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.MAX_PORT">
            <summary>
            The maximum port
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.DEFAULT_SERVER_NAME">
            <summary>
            The default name for an unnamed server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.DEFAULT_SERVER_MESSAGE">
            <summary>
            The default message for a server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.SERVER_POLLING_RATE">
            <summary>
            Time delay between polling for servers (seconds)
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GlobalNetVars.SERVER_PING_RATE">
            <summary>
            Time delay between fetching new pings for servers (seconds)
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.GlobalTileManager.TileManager">
            <summary>
            Gets the global tile manager
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.NetGame">
            <summary>
            Represents a networked game
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.AdvancedGame">
            <summary>
            Represents a slighty more advanced base game class
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.AdvancedGame.SpriteBatch">
            <summary>
            Gets or sets the spritebatch for drawing
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.#ctor">
            <summary>
            Creates a new advanced game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.Initialize">
            <summary>
            Initializes this game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this game
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the game
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.MouseEvent(MonoUI.MouseEventArgs)">
            <summary>
            Called when the state of the mouse has changed
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.AdvancedGame.MouseDown(MonoUI.MouseEventArgs)">
            <summary>
            Called when the mouse is held down
            </summary>
            <param name="state"></param>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame.AccountedUpload">
            <summary>
            The amount uploaded by our packets
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame.AccountedDownload">
            <summary>
            The amount downloaded in our packets
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._client">
            <summary>
            The core Net client
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._port">
            <summary>
            The current port
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._availableServers">
            <summary>
            A list of all local servers, only populated if an IP and port were not specified
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._serverTimers">
            <summary>
            A dictionary containg the time when a server IP was last pinged
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._players">
            <summary>
            A list of all other players currently connected
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._myPlayer">
            <summary>
            Represents the client-controlled player
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._view">
            <summary>
            The camera to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._cameraController">
            <summary>
            The camera's controller instance
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._cameraPostEffect">
            <summary>
            The post processing effect for the camera to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._effectTechnique">
            <summary>
            The ID of the current post processing technique to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._seed">
            <summary>
            A time based seed between 0 and 1 for the post processing effect to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._blockAtlas">
            <summary>
            The block lookup atlas to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._map">
            <summary>
            This games map
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._tileManager">
            <summary>
            The tile manager to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._soundEngine">
            <summary>
            The sound engine to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._prevKeyState">
            <summary>
            The previous keyboard state
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._moveVector">
            <summary>
            The vector to move the camera by
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._mouseWorldPos">
            <summary>
            The mouses' position in the world
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._rand">
            <summary>
            a random number generator used for some events
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._editType">
            <summary>
            The type of block to place
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._zoneTpye">
            <summary>
            The type of zone to place
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._isDefininingZone">
            <summary>
            True if the user is currently defining a zone
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._zoneStart">
            <summary>
            The corner of the zone currently being defined
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._gameState">
            <summary>
            The game's current state
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._mainControl">
            <summary>
            The main games's GUI controller
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._menuControl">
            <summary>
            The main menu's GUI controller
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._serverListControl">
            <summary>
            The server list GUI controller
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._fpsLabel">
            <summary>
            A label displaying the FPS
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._textInput">
            <summary>
            An event handler for event based text input
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._paperTex">
            <summary>
            A paper texture for drawing to the background
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._blockTexs">
            <summary>
            A list of block textures loaded from the atlas
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetGame._guiFont">
            <summary>
            The font to use in GUI rendering
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.#ctor(System.String)">
            <summary>
            Creates a new instance of a networked game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.Initialize">
            <summary>
            Initializes the game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.LoadContent">
            <summary>
            Loads the content for this game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this game
            </summary>
            <param name="gameTime">The current time stamp</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this game
            </summary>
            <param name="gameTime">The current time stamp</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.DrawMainGame">
            <summary>
            Draws the main game
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.DrawMenu">
            <summary>
            Draws the game's main menu
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.DrawServerList">
            <summary>
            Draws the server list
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.MousePressed(MonoUI.MouseEventArgs)">
            <summary>
            Called when a mouse button is pressed
            </summary>
            <param name="args">The current mouse arguments</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.MouseDown(MonoUI.MouseEventArgs)">
            <summary>
            Called when a mouse button is held down
            </summary>
            <param name="args">The current mouse arguments</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.MouseReleased(MonoUI.MouseEventArgs)">
            <summary>
            Called when a mouse button is released
            </summary>
            <param name="args">The current mouse arguments</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.MouseEvent(MonoUI.MouseEventArgs)">
            <summary>
            Invoked when a mouse button state has changed
            </summary>
            <param name="state">A snapshot of mouse values</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.Window_TextInput(System.Object,Microsoft.Xna.Framework.TextInputEventArgs)">
            <summary>
            Called when text has been entered via the keyboard
            </summary>
            <param name="sender">The object to raise this event</param>
            <param name="e">The text event arguments containing the character pressed</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnCampaignButtonPressed">
            <summary>
            Called when the campaign button was pressed
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnSinglePlayerButtonPressed">
            <summary>
            Called when the single player button in the main menu is pressed
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnLANButtonPressed">
            <summary>
            Called when the LAN button in the main menu is pressed
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnServerInfoMousePressed(System.Object,MonoUI.ListViewItem)">
            <summary>
            Called when the a server is selected from the server list
            </summary>
            <param name="sender">The object that raised the event, should be the server list control</param>
            <param name="e">The selected list view item</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnItemChanged(System.Object,MonoUI.GridViewItem)">
            <summary>
            Called when an item in the block list is selected
            </summary>
            <param name="sender">The object to raise the event</param>
            <param name="item">The newly selected item</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnZoneChanged(System.Object,MonoUI.GridViewItem)">
            <summary>
            Called when an item in the zone list is selected
            </summary>
            <param name="sender">The object to raise the event</param>
            <param name="item">The newly selected item</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnLoadButtonPressed">
            <summary>
            Called when the load button is pressed in singleplayer
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnSaveButtonPressed">
            <summary>
            Called when the save button is pressed in singleplayer
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.SaveGame(System.String)">
            <summary>
            Saves this game to a given file
            </summary>
            <param name="fName">The relative file name to save to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.LoadGame(System.String)">
            <summary>
            Loads this game from a given file
            </summary>
            <param name="fName">The relative file name to load from</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.ExitToMenu">
            <summary>
            Exits this game to the main menu
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnExiting(System.Object,System.EventArgs)">
            <summary>
            Called when the application is exiting
            </summary>
            <param name="sender">The object to raise the event</param>
            <param name="args">The event args sent to this event</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.UpdateNetworking">
            <summary>
            Updates this network handler, should be threaded
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.PollTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when it is time to poll for more servers and to update server states
            </summary>
            <param name="sender">The object to raise the event</param>
            <param name="e">The timer elapsed argument</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.PollForServers">
            <summary>
            Checks for local servers. Later, this will poll the central server for servers
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.NetGame_OnFoundServer(DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Called when a new server has been discovered
            </summary>
            <param name="serverInfo">The info of the newly discovered server</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnJoinedServer(DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Invoked when we have joined a server
            </summary>
            <param name="info">The info for the server we are connecting to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.OnShouldPingServers(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when the ping for all available servers should be calculated
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.ConnectToServer(DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Connects the internal client to a specified game server
            </summary>
            <param name="server">The server to connect to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.RequestJoin">
            <summary>
            Called when this client should request to join the server
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.RequestBlockChange(System.Int32,System.Int32,System.Byte)">
            <summary>
            Called when this client is requesting a block update
            </summary>
            <param name="x">The x coordinates to set (chunk)</param>
            <param name="y">The y coordinates to set (chunk)</param>
            <param name="newID">The ID to set the block to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.RequestNewZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Called when this client is requesting a block update
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.RequestDelZone(System.Int32,System.Int32)">
            <summary>
            Called when this client is requesting a zone to be deleted
            </summary>
            <param name="x">The x coord to delete at</param>
            <param name="y">The y coord to delete at</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.ExitGame(System.String)">
            <summary>
            Called when we should leave the game
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandlePingResponse(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Handles responding to an incoming ping response
            </summary>
            <param name="msg">The message to parse</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleMapChanged(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the server has changed maps
            </summary>
            <param name="m">The message to handle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleConnectionFailed(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the client receives a connection failed message
            </summary>
            <param name="m">The message to handle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleJoin(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the server accepts a clients join attempt
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleBlockChanged(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the server accepts a clients join attempt
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleZoneAdded(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the server says a zone has been added
            </summary>
            <param name="m">The message to parse</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.HandleZoneDel(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when the server says a zone has been removed
            </summary>
            <param name="m">The message to parse</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.PlayerJoined(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when another player joins the game
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetGame.PlayerLeft(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="m"></param>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnFoundServerEvent">
            <summary>
            Called when a server has been discovered
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnJoinedServerEvent">
            <summary>
            Called when this client connects to a server
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnPlayerJoinedEvent">
            <summary>
            Called when a player has joined
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnPlayerLeftEvent">
            <summary>
            Called when a player has left
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnTerrainSetEvent">
            <summary>
            Called when the server sent a tile set message
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.NetGame.OnConnectionFailedEvent">
            <summary>
            Called when a server connection was unsucessful
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetGame.WorldWidth">
            <summary>
            Gets the underlying world width for this net game
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetGame.WorldHeight">
            <summary>
            Gets the underlying world height for this net game
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetGame.AvailableServers">
            <summary>
            Gets the list of available servers
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetGame.SinglePlayer">
            <summary>
            Gets or sets whether this game in singleplayer
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetManager.#ctor(DoodleEmpires.Engine.Net.NetPacketIdentifierSize,Lidgren.Network.NetPeer)">
            <summary>
            Creates a new net manager
            </summary>
            <param name="idSize">The size of packet ID's to read/write</param>
            <param name="peer">The peer to listen to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetManager.Run">
            <summary>
            Starts running this net manager, note that this call will run the networking on a new thread
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetManager.PerformRun">
            <summary>
            The backend method for running the listener
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetManager.OnUnknowPacketReceived(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Called when an unknown packet was received, default is to shut down the peer
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetManager.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetManager.Peer">
            <summary>
            Gets or sets the netpeer to listen to
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.NetPlayer">
            <summary>
            Represents a network instance of a player
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.NetPlayer.#ctor(DoodleEmpires.Engine.Net.PlayerInfo,Lidgren.Network.NetConnection)">
            <summary>
            Creates a new network player instance
            </summary>
            <param name="info">The player's infomration</param>
            <param name="connection">The player's network connection</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetPlayer.Info">
            <summary>
            Gets this player's information
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetPlayer.PlayerIndex">
            <summary>
            Gets this player's player index
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.NetPlayer.NetConnection">
            <summary>
            Gets this player's network connection
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.IPacket.Handle(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Handles an incoming network message
            </summary>
            <param name="msg">The message to handle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.IPacket.Send(Lidgren.Network.NetOutgoingMessage)">
            <summary>
            Prepares an outgoing message
            </summary>
            <param name="msg">The message to write data to</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.IPacket.DeliveryMethod">
            <summary>
            gets or sets the delivery method to use for this packet type
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.IPacket.Reciepient">
            <summary>
            Gets or sets the target reciepient for this packet
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.IPacket.SendToAll">
            <summary>
            Gets or sets wheter this packet should be sent to all clients
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.IPacket.PacketID">
            <summary>
            Gets or sets the ID of the packet to handle
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.PlayerInfo">
            <summary>
            Represents a player's information
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.PlayerInfo.#ctor(System.String)">
            <summary>
            Creates a new player info
            </summary>
            <param name="userName">The player's name</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.PlayerInfo.#ctor(System.String,Lidgren.Network.NetConnection)">
            <summary>
            Creates a new player info
            </summary>
            <param name="userName">The player's name</param>
            <param name="connection">The player's network connection</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.PlayerInfo.WriteToPacket(Lidgren.Network.NetOutgoingMessage)">
            <summary>
            Writes this player info to a packet
            </summary>
            <param name="p">The packet to write to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.PlayerInfo.ReadFromPacket(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Reads a player info from a network packet
            </summary>
            <param name="p">The packet to read from</param>
            <returns>A player info read from the packet</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.PlayerInfo.PlayerIndex">
            <summary>
            Gets or sets this player's playerID
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.PlayerInfo.UserName">
            <summary>
            Gets this player's name
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.PlayerInfo.Connection">
            <summary>
            Gets this player's network connection
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.GameServer">
            <summary>
            The main game server
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.GameServer.Run(System.String[])">
            <summary>
            Runs this server with the given command-line arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.GameServer.Save(System.IO.Stream)">
            <summary>
            Saves this server to a stream
            </summary>
            <param name="fileStream">The file stream to save to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.GameServer.Load(System.IO.Stream)">
            <summary>
            Loads a server map from a stream
            </summary>
            <param name="fileStream">The stream to load from</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.GameServer.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.GameServer.Players">
            <summary>
            Gets a list of all non-null player currently connected
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.GameServer.Message">
            <summary>
            Gets or sets this server's message
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.GameServer.Exiting">
            <summary>
            Gets or sets whether this server should exit at the end of it's current loop
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ServerInfo">
            <summary>
            Represents basic info about a server
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.#ctor(System.String,System.Net.IPEndPoint,System.String)">
            <summary>
            Creates a new server info
            </summary>
            <param name="name">The name of the server</param>
            <param name="internalEndpoint">The server's endpoint</param>
            <param name="message">The message for this server to display</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new server info
            </summary>
            <param name="name">The name of the server</param>
            <param name="message">The message for this server to display</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.WriteToPacket(Lidgren.Network.NetOutgoingMessage)">
            <summary>
            Writes this server info to a packet
            </summary>
            <param name="message">The packet to write to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.ReadFromPacket(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Reads a server info from a packet
            </summary>
            <param name="message">The packet to read from</param>
            <returns>A server info read from the packet</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to another
            </summary>
            <param name="obj">The object to check against</param>
            <returns>True if this object is equal to the given one</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.op_Equality(DoodleEmpires.Engine.Net.ServerInfo,DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Checks if two objects are equal to another
            </summary>
            <param name="a">The first item to check</param>
            <param name="b">The item to check against</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.op_Inequality(DoodleEmpires.Engine.Net.ServerInfo,DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Checks if two objects are not equal to another
            </summary>
            <param name="a">The first item to check</param>
            <param name="b">The item to check against</param>
            <returns>True if the objects are not equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>The hash code for this instance</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.IP">
            <summary>
            Gets the IP of this server, represented as a string
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.InternalEndPoint">
            <summary>
            The network endpoint for this server
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.ExternalEndPoint">
            <summary>
            The external endpoint for this server
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.Name">
            <summary>
            The name of this server
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.Message">
            <summary>
            Gets or sets the server message to be displayed
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.Ping">
            <summary>
            Gets or sets the ping to the server in seconds
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.PlayerCount">
            <summary>
            Gets or sets the player count for this info
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfo.MaxPlayerCount">
            <summary>
            Gets or sets the maximum player count for this info
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ServerInfoListItem">
            <summary>
            A ListViewItem for drawing server info
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfoListItem.#ctor(DoodleEmpires.Engine.Net.ServerInfo)">
            <summary>
            Creates a new server info list item
            </summary>
            <param name="info">The info of the server to draw</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerInfoListItem.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Renders this list view item
            </summary>
            <param name="batch">The spritebatch to use for drawing</param>
            <param name="font">The font to use for rendering text for this items</param>
            <param name="bounds">The bounds to render in</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerInfoListItem.Info">
            <summary>
            Gets or sets the server info associated with this item
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.NetPacketType">
            <summary>
            The packet type of a packet
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.RequestJoin">
            <summary>
            The packet is to request a join from a client
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.AcceptedJoin">
            <summary>
            The packet is confirming a request to join from a client
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ConnectionFailed">
            <summary>
            The packet is to deny request to join from a client
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.PlayerJoined">
            <summary>
            The packet is to state that a client has joined a server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.PlayerLeft">
            <summary>
            The packet is to state that a client has left a server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.RequestBlockChanged">
            <summary>
            The packet is to make a request for a block change
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.BlockUpdate">
            <summary>
            The packet is to state that a block has been changed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.MetaChanged">
            <summary>
            The packet is to state that a block's metadata has been changed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ReqZoneadded">
            <summary>
            The packet is to make a request for a zone to be defined
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ReqZoneRemoved">
            <summary>
            The packet is to make a request for a zone to be removed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ZoneAdded">
            <summary>
            The packet is to state a zone has been added
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ZoneRemoved">
            <summary>
            The packet is to state a zone hs been removed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.MapChanged">
            <summary>
            This packet states that the map has changed and needs to be re-downloaded
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.PingMessage">
            <summary>
            Represents a packet used for pinging servers or clients
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketType.ServerInfoChanged">
            <summary>
            Called when a server's information has updated
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.GameState">
            <summary>
            Represents the state of the game
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GameState.MainMenu">
            <summary>
            The game is currently in the main menu
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GameState.ServerList">
            <summary>
            The game is currently in the server list
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GameState.Lobby">
            <summary>
            The game is currently in the server lobby
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GameState.JoiningGame">
            <summary>
            The game is currently joining a server
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.GameState.InGame">
            <summary>
            The game is currently in the main game
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.NetPacketIdentifierSize">
            <summary>
            Represents the size of a newtwork packet identifier, the value of this enum contains the max number of packet types
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketIdentifierSize.Byte">
            <summary>
            The packet identifiers are 1 byte (8 bits)
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketIdentifierSize.Short">
            <summary>
            The packet identifiers are 2 bytes read as a short (16 bits)
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.NetPacketIdentifierSize.Int">
            <summary>
            The packet identifiers are 4 bytes read as an int (32 bits)
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.ServerMap">
            <summary>
            The server's version of the voxel terrain
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.VoxelMap">
            <summary>
            The base class for the voxel maps
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.VoxelMap.SetTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the tile ID at the given [x, y] position
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <param name="newID">The ID of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.VoxelMap.SetTileSafe(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the tile ID at the given [x, y] position
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <param name="newID">The ID of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.VoxelMap.SetMeta(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the meta at the given [x, y] position
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <param name="newMeta">The meta of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.VoxelMap.GetMeta(System.Int32,System.Int32)">
            <summary>
            Gets the meta at the given [x, y] position
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <returns>The meta of the tile</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.VoxelMap.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the tile ID at the given [x, y] position
            </summary>
            <param name="x">The x coord of the tile</param>
            <param name="y">The y coord of the tile</param>
            <returns>Gets the tile ID at the given [x, y] position</returns>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap.TILE_WIDTH">
            <summary>
            Gets the width of a single voxel tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap.TILE_HEIGHT">
            <summary>
            Gets the height of a single voxel tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap.TREE_DESNISTY">
            <summary>
            Gets the number of trees per 32 tiles
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._voxelBounds">
            <summary>
            An array holding all of the bounding rectangles to draw voxels in
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._tiles">
            <summary>
            The materials for all the voxels
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._meta">
            <summary>
            The metadata for all the voxels
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._width">
            <summary>
            The number of tiles along the x axis
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._height">
            <summary>
            The number of tiles along the y axis
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._random">
            <summary>
            A randoom number generator used for some events
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._terrainHeightModifier">
            <summary>
            How far down to shift terrain generation
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.ServerMap._updateThread">
            <summary>
            Thread used for updating tiles
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.#ctor(DoodleEmpires.Engine.Terrain.TileManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.Single)">
            <summary>
            Creates a new voxel based terrain
            </summary>
            <param name="tileManager">The tile manager for this map</param>
            <param name="width">The width of the map, in tiles</param>
            <param name="height">The height of the map, in tiles</param>
            <param name="seed">The seed to generate from, or null to pick random seed</param>
            <param name="terrainHeightModifier">The height to shift the terrain down by</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.DefineZone(System.Int32,System.Int32,System.Int32,System.Int32,DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="minX">The minimum X coord (chunk)</param>
            <param name="minY">The minimum Y coord (chunk)</param>
            <param name="maxX">The maximum X coord (chunk)</param>
            <param name="maxY">The maximum Y coord (chunk)</param>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.DefineZone(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="min">The minimum bounds of the zone, in world coords</param>
            <param name="max">The maximum bounds of the zone, in world coords</param>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.DefineZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.DeleteZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Deletes a specific zone
            </summary>
            <param name="zone">The zone to delete</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.AddZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Handles adding a pre-snapped zone to the zone list
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SetMeta(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the metadata at the given chunk coords
            </summary>
            <param name="x">The x coordinate (chunk)</param>
            <param name="y">The y coordinate (chunk)</param>
            <param name="meta">The metadata to set to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.GetMeta(System.Int32,System.Int32)">
            <summary>
            Gets the metadata at the given chunk coords
            </summary>
            <param name="x">The x coordinate (chunk)</param>
            <param name="y">The y coordinate (chunk)</param>
            <returns>The metadata at the given x and y</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.GenTerrain">
            <summary>
            Generates the terrain
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.BuildVoxelBouds">
            <summary>
            Builds all the voxel bounds for this map
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.GenTree(System.Int32,System.Int32)">
            <summary>
            Generates a tree at the given x and y
            </summary>
            <param name="x">The x coordinate of the base of the tree</param>
            <param name="y">The y coordinate of the base of the tree</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.IsSolid(System.Int32,System.Int32)">
            <summary>
            Checks if the voxel the given position is solid
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>True is the block at [x,y] is solid</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.IsNotAir(System.Int32,System.Int32)">
            <summary>
            Checks if the voxel the given position is not air
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>True is the block at [x,y] is not air</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.Intersects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks if a rectangle intersects with this voxel map
            </summary>
            <param name="rect">The rectangle to check</param>
            <returns>True if the rectangle intersect this voxel map</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.CheckCollision(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks a tile collision at the given tile coords
            </summary>
            <param name="x">The x coordinate to check (chunk)</param>
            <param name="y">The y coordinate to check (chunk)</param>
            <param name="rect">The rectangle to check</param>
            <returns>True if the tile intersects the rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.CanConnect(System.Byte,System.Byte)">
            <summary>
            Checks if two voxel types can connect to each other
            </summary>
            <param name="sourceID">The source ID to check</param>
            <param name="destinationID">The destination ID to check</param>
            <returns>True if they can connect</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.IsInsideOctagon(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks is a point is inside of a octagon
            </summary>
            <param name="xx">The x coordinate of the octagon's centre</param>
            <param name="yy">The y coordinate of the octagon's centre</param>
            <param name="radius">The radius of the octagon</param>
            <param name="x">The x coordinate to check</param>
            <param name="y">The y coordinate to check</param>
            <returns>True if the point is inside of the octagon</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.GetMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the voxel material at the given position
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>The material at [x,y]</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SetTileCore(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the voxel material at the given position, should only be called by tile classes
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <param name="id">The material to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SetTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the voxel material at the given position, should only be called by tile classes
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <param name="id">The material to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SetTileSafe(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the voxel material at the given position
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <param name="id">The material to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SetSphere(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets a sphere to one tile ID
            </summary>
            <param name="x">The x coord of the centre of the circle</param>
            <param name="y">The y coord of the centre of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="value">The tile ID to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.SaveToStream(System.IO.Stream)">
            <summary>
            Saves this voxel terrain to a stream
            </summary>
            <param name="stream">The stream to save to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.ReadFromStream(System.IO.Stream,DoodleEmpires.Engine.Terrain.TileManager)">
            <summary>
            Reads a voxel terrain from the stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="tileManager">The tile manager to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.LoadVersion_0_0_1(System.IO.BinaryReader,DoodleEmpires.Engine.Terrain.TileManager)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.1
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="tileManager">The tile manager to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.LoadVersion_0_0_2(System.IO.BinaryReader,DoodleEmpires.Engine.Terrain.TileManager)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.1
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="tileManager">The tile manager to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.WriteToMessage(Lidgren.Network.NetOutgoingMessage)">
            <summary>
            Writes this terrain into an outgoing packet. 
            Note that this packet will be very large afterwards
            </summary>
            <param name="message">The packet to write to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.ServerMap.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the voxel material at the given x and y
            </summary>
            <param name="x">The x coordinate to set (chunk coords)</param>
            <param name="y">The y coordinate to set (chunk coords)</param>
            <returns>The voxel at (x, y)</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.WorldWidth">
            <summary>
            Gets the width of the world in world coords
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.WorldHeight">
            <summary>
            Gets the height of the world in world coords
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.Zones">
            <summary>
            Gets a list of zones in this voxel map
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.TileManager">
            <summary>
            Gets or sets the tile manager to use
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.ServerMap.Seed">
            <summary>
            Gets this level's seed
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.ServerMap.OnTerrainSet">
            <summary>
            Invoked when a tile ID changes
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.ServerMap.OnMetaChanged">
            <summary>
            Invoked when a tile meta changes
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.ServerMap.OnZoneAdded">
            <summary>
            Invoked when a zone is added
            </summary>
        </member>
        <member name="E:DoodleEmpires.Engine.Net.ServerMap.OnZoneRemoved">
            <summary>
            Invoked when a zone is removed
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.DeltaMapChange">
            <summary>
            Represents a change that has been made since the world was generated
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.DeltaMapChange.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Creates a new instance of a map change
            </summary>
            <param name="x">The x-coord of the tile</param>
            <param name="y">The y-coord of the tile</param>
            <param name="newID">The new ID of the tile</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.DeltaMapChange.X">
            <summary>
            The x coord of the change
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.DeltaMapChange.Y">
            <summary>
            The y coord of the change
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.DeltaMapChange.NewID">
            <summary>
            The new ID for the change
            </summary>
        </member>
        <member name="T:ICamera2D">
            <summary>
            Represents an implementation of a 2D camera
            </summary>
        </member>
        <member name="M:ICamera2D.BeginDraw">
            <summary>
            Begins rendering with this camera
            </summary>
        </member>
        <member name="M:ICamera2D.EndDraw">
            <summary>
            Ends the rendering pass and presents this camera's view
            </summary>
        </member>
        <member name="M:ICamera2D.IsInView(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Determines whether the target is in view given the specified position.
            This can be used to increase performance by not drawing objects
            directly in the viewport
            </summary>
            <param name="position">The position.</param>
            <param name="texture">The texture.</param>
            <returns>
                <c>true</c> if the target is in view at the specified position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ICamera2D.PointToWorld(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the world co-ordinates for the given screen co-ordinates
            </summary>
            <param name="screenCoords">The screen co-ordinates to convert</param>
            <returns>The point in the world relating to the point on the screen</returns>
        </member>
        <member name="P:ICamera2D.Position">
            <summary>
            Gets or sets the position of the camera
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:ICamera2D.MoveSpeed">
            <summary>
            Gets or sets the move speed of the camera.
            The camera will tween to its destination.
            </summary>
            <value>The move speed.</value>
        </member>
        <member name="P:ICamera2D.Rotation">
            <summary>
            Gets or sets the rotation of the camera.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:ICamera2D.Origin">
            <summary>
            Gets the origin of the viewport (accounts for Scale)
            </summary>        
            <value>The origin.</value>
        </member>
        <member name="P:ICamera2D.Scale">
            <summary>
            Gets or sets the scale of the Camera
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:ICamera2D.ScreenCenter">
            <summary>
            Gets the screen center (does not account for Scale)
            </summary>
            <value>The screen center.</value>
        </member>
        <member name="P:ICamera2D.Transform">
            <summary>
            Gets the transform that can be applied to 
            the SpriteBatch Class.
            </summary>
            <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>
            <value>The transform.</value>
        </member>
        <member name="P:ICamera2D.Projection">
            <summary>
            Gets the projection matrix for this camera
            </summary>
        </member>
        <member name="P:ICamera2D.Focus">
            <summary>
            Gets or sets the focus of the Camera.
            </summary>
            <seealso cref="T:DoodleEmpires.Engine.Entities.IFocusable"/>
            <value>The focus.</value>
        </member>
        <member name="P:ICamera2D.ViewBounds">
            <summary>
            Gets the world bounds that this camera displays
            </summary>
        </member>
        <member name="P:ICamera2D.ScreenBounds">
            <summary>
            Gets or sets the bounds that this camera is limited to
            </summary>
        </member>
        <member name="P:ICamera2D.PostEffect">
            <summary>
            Gets or sets the post-processing effect for this camera
            </summary>
        </member>
        <member name="T:Camera2D">
            <summary>
            Represents a 2-Dimensional camera
            </summary>
        </member>
        <member name="F:Camera2D._renderTarget">
            <summary>
            The internal texture to render to
            </summary>
        </member>
        <member name="F:Camera2D._postEffect">
            <summary>
            The post processing effect to apply
            </summary>
        </member>
        <member name="F:Camera2D._spriteBatch">
            <summary>
            Teh spritebatch used to render the final image
            </summary>
        </member>
        <member name="F:Camera2D._viewportHeight">
            <summary>
            The height of the graphics viewport
            </summary>
        </member>
        <member name="F:Camera2D._viewportWidth">
            <summary>
            The width of the graphics viewport
            </summary>
        </member>
        <member name="F:Camera2D._viewBounds">
            <summary>
            The bounds that this camera has in the world
            </summary>
        </member>
        <member name="F:Camera2D._graphics">
            <summary>
            The graphics device that this camera is bound to
            </summary>
        </member>
        <member name="M:Camera2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new 2D camera
            </summary>
            <param name="graphics">The graphics device to bind to</param>
        </member>
        <member name="M:Camera2D.Initialize">
            <summary>
            Called when the GameComponent needs to be initialized. 
            </summary>
        </member>
        <member name="M:Camera2D.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this camera
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:Camera2D.BeginDraw">
            <summary>
            Sets the graphics states and begins rendering with this camera
            </summary>
        </member>
        <member name="M:Camera2D.EndDraw">
            <summary>
            Finishes rendering with this camera and presents to the screen
            </summary>
        </member>
        <member name="M:Camera2D.IsInView(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Determines whether the target is in view given the specified position.
            This can be used to increase performance by not drawing objects
            directly in the viewport
            </summary>
            <param name="position">The position.</param>
            <param name="texture">The texture.</param>
            <returns>
                <c>true</c> if [is in view] [the specified position]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Camera2D.PointToWorld(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the world co-ordinates for the given screen co-ordinates
            </summary>
            <param name="screenPoint">The screen co-ordinates to convert</param>
            <returns>The point in the world relating to the point on the screen</returns>
        </member>
        <member name="M:Camera2D.PointToWorld(System.Single,System.Single)">
            <summary>
            Gets the world co-ordinates for the given screen co-ordinates
            </summary>
            <param name="x">The x coordinate to translate</param>
            <param name="y">The y coordinate to translete</param>
            <returns>The point in the world relating to the point on the screen</returns>
        </member>
        <member name="M:Camera2D.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:Camera2D.PostEffect">
            <summary>
            Gets or sets the post-processing effect for this camera
            </summary>
        </member>
        <member name="P:Camera2D.Position">
            <summary>
            Gets or sets this camera's position
            </summary>
        </member>
        <member name="P:Camera2D.Rotation">
            <summary>
            Gets or sets this camera's rotation
            </summary>
        </member>
        <member name="P:Camera2D.Origin">
            <summary>
            Gets or sets this camera's orgin
            </summary>
        </member>
        <member name="P:Camera2D.Scale">
            <summary>
            Gets or sets this camera's scale
            </summary>
        </member>
        <member name="P:Camera2D.ScreenCenter">
            <summary>
            Gets the screen centre for this camera
            </summary>
        </member>
        <member name="P:Camera2D.Transform">
            <summary>
            Gets or sets this camera's transformation matrix
            </summary>
        </member>
        <member name="P:Camera2D.Projection">
            <summary>
            Gets or sets this camera's projection matrix
            </summary>
        </member>
        <member name="P:Camera2D.Focus">
            <summary>
            Gets or sets this camera's focus object
            </summary>
        </member>
        <member name="P:Camera2D.MoveSpeed">
            <summary>
            Gets or sets this camera's movement speed
            </summary>
        </member>
        <member name="P:Camera2D.ViewBounds">
            <summary>
            Gets the view bounds for this camera
            </summary>
        </member>
        <member name="P:Camera2D.ScreenBounds">
            <summary>
            Gets the snap bounds for this camera
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Entities.CameraControl">
            <summary>
            A basic controller for a 2D camera
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.CameraControl._position">
            <summary>
            The current target position
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Entities.CameraControl._bounds">
            <summary>
            The bounds that the controller must stay within
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.CameraControl.#ctor(ICamera2D)">
            <summary>
            Creates a new camera controller
            </summary>
            <param name="camera">The camera to control</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Entities.CameraControl.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this camera controller
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Entities.CameraControl.Position">
            <summary>
            Gets or sets the camera controller's position
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Sound.SoundEngine">
            <summary>
            Represents the sound manager
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Sound.SoundEngine.#ctor">
            <summary>
            Creates a new instance of a sound engine
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Sound.SoundEngine.AddSound(System.String,Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Adds a sound effect
            </summary>
            <param name="name">The name of the instance</param>
            <param name="effect">The sound effect to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Sound.SoundEngine.PlaySound(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Plays a sound with the given name
            </summary>
            <param name="name">The name of the sound</param>
            <param name="position">The position to play the sound at</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Sound.SoundEngine.SetSoundForCamera(Microsoft.Xna.Framework.Audio.SoundEffectInstance,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Sets the sound effect instance to apply to the camera
            </summary>
            <param name="sound">The sound effect instance to modify</param>
            <param name="position">The position to play the sound from</param>
            <param name="baseVolume">The base volume of the sound</param>
            <returns>True if the sound needs to be played</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Sound.SoundEngine.ListenerPosition">
            <summary>
            Gets or sets the position of the listener
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Render.ColoredMesh">
            <summary>
            Represents a simple colored mesh
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.ColoredMesh.#ctor(Microsoft.Xna.Framework.Graphics.PrimitiveType,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new Colored mesh
            </summary>
            <param name="primitiveType">The primitive type for this mesh</param>
            <param name="graphics">The Graphics Device to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.ColoredMesh.AddVert(Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
            <summary>
            Adds a vertice to this mesh
            </summary>
            <param name="vert">The vertex to add</param>
            <returns>The index of the vertex</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.ColoredMesh.AddIndex(System.Int32)">
            <summary>
            Adds a vertex to this mesh
            </summary>
            <param name="index">The inndex of the vertice to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.ColoredMesh.Finish">
            <summary>
            Calculates the number of primitives, must be called when geometry is changed
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.ColoredMesh.Render">
            <summary>
            Renders this mesh
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.ColoredMesh.Item(System.Int32)">
            <summary>
            Gets or sets a vertex in this mesh
            </summary>
            <param name="index">The index to look up</param>
            <returns>The vertex at the given index</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Render.Particle.Particle">
            <summary>
            Represents an instance of a particle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.Position">
            <summary>
            Gets or sets this particles' position
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.Velocity">
            <summary>
            Gets or sets this particles' velocity
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.Rotation">
            <summary>
            Gets or sets this particles' rotation
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.AngularVelocity">
            <summary>
            Gets or sets this particles' angular velocity
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.Color">
            <summary>
            The color of this particle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.Scale">
            <summary>
            The scale of this particle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Render.Particle.Particle.TTL">
            <summary>
            How long this particle has to live, in seconds
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Creates a new particle
            </summary>
            <param name="position">The position of the particle</param>
            <param name="velocity">The velocity of the particle</param>
            <param name="scale">The scale of the particle</param>
            <param name="ttl">The time to live for this particle in seconds</param>
            <param name="color">The color of this particle</param>
            <param name="rotation">The initial rotation of this particle</param>
            <param name="angularVelocity">The angula velocity of this particle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.Update(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates this particle
            </summary>
            <param name="gameTime">The current game time</param>
            <param name="gravity">The current gravity</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.op_Equality(DoodleEmpires.Engine.Render.Particle.Particle,DoodleEmpires.Engine.Render.Particle.Particle)">
            <summary>
            Checks equality between two particles
            </summary>
            <param name="a">The particle</param>
            <param name="b">The particle to check against</param>
            <returns>True if the particles are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.op_Inequality(DoodleEmpires.Engine.Render.Particle.Particle,DoodleEmpires.Engine.Render.Particle.Particle)">
            <summary>
            Checks inequality between two particles
            </summary>
            <param name="a">The particle</param>
            <param name="b">The particle to check against</param>
            <returns>True if the particles are not equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.Equals(System.Object)">
            <summary>
            Checks if this particle is equal to an object
            </summary>
            <param name="obj">The object to check against</param>
            <returns>True if the object is equal to this particle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.Particle.GetHashCode">
            <summary>
            Gets a unique hashcode for this particle
            </summary>
            <returns>A unique hashcode</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Render.Particle.ParticleEmitter">
            <summary>
            Represents an emitter of particles
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.#ctor(DoodleEmpires.Engine.Render.Particle.ParticleEngine,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new particle emitter
            </summary>
            <param name="engine">The particle engine to bind to</param>
            <param name="position">The POsition of this emitter</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this particle emitter
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.GeneralDirection">
            <summary>
            The general direction to fire particles
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.Force">
            <summary>
            The force to eject particles with
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.ParticlesPerSecond">
            <summary>
            The particles to emit per second
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.Position">
            <summary>
            The position of this emitter
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.RotationalVelocity">
            <summary>
            The initial rotational velocity of particles
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.TTL">
            <summary>
            The default time to live for particles
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEmitter.Color">
            <summary>
            The default color for particles
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Render.Particle.ParticleEngine">
            <summary>
            Represents a particle engine
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new particle engine
            </summary>
            <param name="graphics">The graphics device to bind to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.AddEmitter(DoodleEmpires.Engine.Render.Particle.ParticleEmitter)">
            <summary>
            Adds an emitter to this particle engine
            </summary>
            <param name="emitter">The particle emitter</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.AddParticle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Adds a particle to this particle engine
            </summary>
            <param name="position">The position of the particle</param>
            <param name="velocity">The initial velocity of the particle</param>
            <param name="scale">The scale of the particle</param>
            <param name="ttl">The time to live</param>
            <param name="color">The color of the particle</param>
            <param name="rotation">The initial rotation of the speed</param>
            <param name="angularVelocity">The angular velocity of this particle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.Render(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Renders this particle system
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this particle system
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.Particle.ParticleEngine.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEngine.Gravity">
            <summary>
            Gets or sets the gravity on this particle engine
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.Particle.ParticleEngine.ParticleTexture">
            <summary>
            Gets or sets the particle texture
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Render.RenderChunk`1">
            <summary>
            Represents a chunk of cached graphics data
            </summary>
            <typeparam name="T">The vertex type for this chunk</typeparam>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.PrimitiveType)">
            <summary>
            Creates a new graphcis device
            </summary>
            <param name="graphics">The graphics device to bind to</param>
            <param name="primitiveType">The type of primitive to draw</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.SetVertexBuffer(`0[])">
            <summary>
            Sets the vertex buffer to a given list of vertices
            </summary>
            <param name="vertices">The vertices to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.SetIndexBuffer(System.Int16[])">
            <summary>
            Sets the index buffer to a given list of indices
            </summary>
            <param name="indices">The indices to use</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.CalcPrimitives">
            <summary>
            Caclulate the number of primitives to draw based off the primitive type
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.Render">
            <summary>
            Renders this item using the underlying graphics device
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Render.RenderChunk`1.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.RenderChunk`1.IndexBuffer">
            <summary>
            Gets this render chunk's index buffer
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Render.RenderChunk`1.VertexBuffer">
            <summary>
            Gets this render chunk's vertex buffer
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.Tile">
            <summary>
            Represents a tile type
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.Tile.Type">
            <summary>
            The tile ID for this tile type
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.Tile.TextureID">
            <summary>
            The basic texture ID for this tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.Tile.RenderType">
            <summary>
            The render tye for this tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.Tile.Solid">
            <summary>
            True if this tile type is solid
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.Tile.Color">
            <summary>
            The color multiplier for this tile type
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.#ctor(System.Byte,System.Int16,DoodleEmpires.Engine.Terrain.RenderType,System.Boolean)">
            <summary>
            Creates a new instance of a tile type
            </summary>
            <param name="type">The type ID for this tile</param>
            <param name="textureID">The base texture ID for this tile type</param>
            <param name="renderType">The render type for this tile</param>
            <param name="solid">True if the tile is solid</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,DoodleEmpires.Engine.Utilities.TextureAtlas,Microsoft.Xna.Framework.Rectangle,System.Byte,System.Byte)">
            <summary>
            Draws this tile
            </summary>
            <param name="spriteBatch">The spritebatch to draw with</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="bounds">The bounds to render in</param>
            <param name="mooreState">The moore neighbours state</param>
            <param name="meta">The block's meta data</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.Intersects(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks if this tile intersects a rectangle
            </summary>
            <param name="check">The rectangle to check</param>
            <param name="bounds">The current bounds of the tile</param>
            <returns>True if the tile intersects the checking rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.AddToWorld(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Handles adding this tile type to the world
            </summary>
            <param name="world">The world to add to</param>
            <param name="x">The x-coord of the tile to set</param>
            <param name="y">The y-coord of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.RemovedFromWorld(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Handles removing this tile type from the world
            </summary>
            <param name="world">The world to remove from</param>
            <param name="x">The x-coord of the tile to remove</param>
            <param name="y">The y-coord of the tile to remove</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Tile.OnTick(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Called when a tile of this type is updated
            </summary>
            <param name="map">The world that this tile exists in</param>
            <param name="x">The x-coordinate in block coords</param>
            <param name="y">The y-coordinate in block coords</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.Tile.NeedsUpdate">
            <summary>
            True if this tile type needs to be updated
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.Tile.Climable">
            <summary>
            True if this tile type is climable
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.RenderType">
            <summary>
            Represents how the tile should be rendered
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.RenderType.None">
            <summary>
            This tile uses no special rendering, simple tile based rendering
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.RenderType.Land">
            <summary>
            This tile uses standard land rendering
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Terrain.RenderType.Prop">
            <summary>
            This tile uses prop style rendering
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.TileManager">
            <summary>
            Represents a tile manager 
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.#ctor">
            <summary>
            Creates a new tile manager
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterTile(System.Int16,DoodleEmpires.Engine.Terrain.RenderType,System.Boolean)">
            <summary>
            Adds a new unnamed tile type to this tile manager
            </summary>
            <param name="texID">The texture ID for the tile</param>
            <param name="renderType">The render mode for this tile</param>
            <param name="solid">True if this tile should be treated as solid during collision detection</param>
            <returns>The TileID for the new tile</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterTile(System.String,System.Int16,DoodleEmpires.Engine.Terrain.RenderType,System.Boolean)">
            <summary>
            Adds a new tile type to this tile manager
            </summary>
            <param name="name">The name of the tile to add</param>
            <param name="texID">The texture ID for the tile</param>
            <param name="renderType">The render mode for this tile</param>
            <param name="solid">True if this tile should be treated as solid during collision detection</param>
            <returns>The TileID for the new tile</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterTile(System.String,System.Int16,Microsoft.Xna.Framework.Color,DoodleEmpires.Engine.Terrain.RenderType,System.Boolean)">
            <summary>
            Adds a new tile type to this tile manager
            </summary>
            <param name="name">The name of the tile to add</param>
            <param name="texID">The texture ID for the tile</param>
            <param name="Color">The color for this tile</param>
            <param name="renderType">The render mode for this tile</param>
            <param name="solid">True if this tile should be treated as solid during collision detection</param>
            <returns>The TileID for the new tile</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterTile(System.String,DoodleEmpires.Engine.Terrain.Tile)">
            <summary>
            Adds a new tile type to this tile manager
            </summary>
            <param name="name">The name of the tile to register</param>
            <param name="tile">The tile to add</param>
            <returns>The TileID for the new tile</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.NameOf(System.Byte)">
            <summary>
            Gets the name of the tile with the given ID
            </summary>
            <param name="ID">The ID of the tile</param>
            <returns>The name of tile with the given ID</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.IndexOf(System.String)">
            <summary>
            Gets the index of the tile with the given name
            </summary>
            <param name="name">The name of the tile</param>
            <returns>The index of tile with the given name</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RenderTile(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,DoodleEmpires.Engine.Utilities.TextureAtlas,System.Byte,System.Byte,System.Byte,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders a tile to the screen
            </summary>
            <param name="spriteBatch">The spritebatch to use for rendering</param>
            <param name="bounds">The bounds to render the tile to</param>
            <param name="atlas">The texture atlas to look up textures from</param>
            <param name="mooreState">The neighbour states for this block</param>
            <param name="tileID">The ID of the tile to render</param>
            <param name="metaData">The meta data for the tile to render</param>
            <param name="diffuseColor">The color to transform everything by</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.CheckCollision(System.Byte,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks if a tile will collide with the given bounds and check rectangles
            </summary>
            <param name="tileID">The ID of the tile</param>
            <param name="rect">The rectangle to check</param>
            <param name="bounds">The bounds of the tile</param>
            <returns>True if <i>rect</i> intersects the tile</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.IsSolid(System.Byte)">
            <summary>
            Checks if a given tile ID is solid
            </summary>
            <param name="tileID">The tile ID to check</param>
            <returns>True if the tile type is solid</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.IsClimable(System.Byte)">
            <summary>
            Checks if a given tile ID is climable
            </summary>
            <param name="tileID">The tile ID to check</param>
            <returns>True if the tile type is climable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.CanConnect(System.Byte,System.Byte)">
            <summary>
            Checks if two tiles can connect
            </summary>
            <param name="sourceID">The source tile ID to check from</param>
            <param name="destinationID">The destination tile ID to check to</param>
            <returns>True if the tiles can connect</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterConnect(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Registers a connection between 2 tiles, will register the connection for both source and destination of each
            is setting to true
            </summary>
            <param name="sourceID">The ID of the first tile</param>
            <param name="destinationID">The ID of the second tile</param>
            <param name="canConnect">Whether or not these tiles can connect</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterConnect(System.String,System.String,System.Boolean)">
            <summary>
            Registers a connection between 2 tiles, will register the connection for both source and destination of each
            is setting to true
            </summary>
            <param name="tile1">The name of the first tile</param>
            <param name="tile2">The name of the second tile</param>
            <param name="canConnect">Whether or not these tiles can connect</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterOneWayConnect(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Registers a connection between 1 tile and another. The second tile will not connect to the first
            </summary>
            <param name="sourceID">The ID of the first tile</param>
            <param name="destinationID">The ID of the second tile</param>
            <param name="canConnect">Whether or not these tiles can connect</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.RegisterOneWayConnect(System.String,System.String,System.Boolean)">
            <summary>
            Registers a connection between 1 tile and another. The second tile will not connect to the first
            </summary>
            <param name="tile1">The name of the first tile</param>
            <param name="tile2">The name of the second tile</param>
            <param name="canConnect">Whether or not these tiles can connect</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.TileManager.GenName">
            <summary>
            Generates a random tile name
            </summary>
            <returns>A random tile name</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.TileManager.Tiles">
            <summary>
            Gets the list of tiles
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.TileManager.Item(System.Int32)">
            <summary>
            Gets the tile with the given ID
            </summary>
            <param name="ID">The ID of the tile</param>
            <returns>The Tile with the given ID</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.TileManager.Item(System.String)">
            <summary>
            Gets the ID of the tile with the name
            </summary>
            <param name="name">The name of the tile to get</param>
            <returns>The ID of the tile with the given name</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.Leaves">
            <summary>
            Represents the leaves tile
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Leaves.#ctor(System.Byte)">
            <summary>
            Creates a new instance of the leaves class, used for rendering tiles
            </summary>
            <param name="type">The typeID to assign to leaves</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Leaves.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,DoodleEmpires.Engine.Utilities.TextureAtlas,Microsoft.Xna.Framework.Rectangle,System.Byte,System.Byte)">
            <summary>
            Draws this tile
            </summary>
            <param name="spriteBatch">The spritebatch to draw with</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="bounds">The bounds to render in</param>
            <param name="mooreState">The moore neighbours state</param>
            <param name="meta">The block's meta data</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Leaves.AddToWorld(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Handles adding this tile type to the world
            </summary>
            <param name="world">The world to add to</param>
            <param name="x">The x-coord of the tile to set</param>
            <param name="y">The y-coord of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Leaves.OnTick(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Called when a tile of this type is updated
            </summary>
            <param name="world">The world that this tile exists in</param>
            <param name="x">The x-coordinate in block coords</param>
            <param name="y">The y-coordinate in block coords</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.Leaves.NeedsUpdate">
            <summary>
            Gets whether this block needs updating.
            This is true for leaves.
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.WoodSpike">
            <summary>
            Represents a wooden spike tile
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.WoodSpike.#ctor(System.Byte)">
            <summary>
            Creates a new wood spike tile type
            </summary>
            <param name="type">The ID of the tile</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.WoodSpike.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,DoodleEmpires.Engine.Utilities.TextureAtlas,Microsoft.Xna.Framework.Rectangle,System.Byte,System.Byte)">
            <summary>
            Draws this tile
            </summary>
            <param name="spriteBatch">The spritebatch to draw with</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="bounds">The bounds to render in</param>
            <param name="mooreState">The moore neighbours state</param>
            <param name="meta">The block's meta data</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.Ladder">
            <summary>
            Represents a ladder tile type
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Ladder.#ctor(System.Byte)">
            <summary>
            Creates a new ladder tile type
            </summary>
            <param name="type">The ID of the tile</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Ladder.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,DoodleEmpires.Engine.Utilities.TextureAtlas,Microsoft.Xna.Framework.Rectangle,System.Byte,System.Byte)">
            <summary>
            Draws this tile
            </summary>
            <param name="spriteBatch">The spritebatch to draw with</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="bounds">The bounds to render in</param>
            <param name="mooreState">The moore neighbours state</param>
            <param name="meta">The block's meta data</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Terrain.Ladder.Climable">
            <summary>
            True if this tile type is climable
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.Door">
            <summary>
            Represents a door tile type
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Door.#ctor(System.Byte)">
            <summary>
            Creates a new door tile type
            </summary>
            <param name="type">The ID of the tile</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Door.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,DoodleEmpires.Engine.Utilities.TextureAtlas,Microsoft.Xna.Framework.Rectangle,System.Byte,System.Byte)">
            <summary>
            Draws this tile
            </summary>
            <param name="spriteBatch">The spritebatch to draw with</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="bounds">The bounds to render in</param>
            <param name="mooreState">The moore neighbours state</param>
            <param name="meta">The block's meta data</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Door.AddToWorld(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Handles adding this tile type to the world
            </summary>
            <param name="world">The world to add to</param>
            <param name="x">The x-coord of the tile to set</param>
            <param name="y">The y-coord of the tile to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.Door.RemovedFromWorld(DoodleEmpires.Engine.Terrain.VoxelMap,System.Int32,System.Int32)">
            <summary>
            Handles removing this tile type from the world
            </summary>
            <param name="world">The world to remove from</param>
            <param name="x">The x-coord of the tile to remove</param>
            <param name="y">The y-coord of the tile to remove</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Terrain.HeightmapExtensions">
            <summary>
            Some basic extansions for manipulating heightmap
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.HeightmapExtensions.Smooth(System.Single[],System.Int32)">
            <summary>
            Smooths a height map
            </summary>
            <param name="heightmap">The heightmap to smooth</param>
            <param name="passes">The number of passes to make, default 1</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Terrain.HeightmapExtensions.Smooth(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Smooths a height map
            </summary>
            <param name="heightmap">The heightmap to smooth</param>
            <param name="minX">The minimum x coord to smooth from</param>
            <param name="maxX">The maximum x coord to smooth from</param>
            <param name="passes">The number of passes to make, default 1</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.SPMap">
            <summary>
            A terrain that is made up of small cubes, each having it's own texture and properties
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap.TILE_WIDTH">
            <summary>
            Gets the width of a single voxel tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap.TILE_HEIGHT">
            <summary>
            Gets the height of a single voxel tile
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap.TREE_DESNISTY">
            <summary>
            Gets the number of trees per 32 tiles
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap.ZONE_ALPHA">
            <summary>
            Gets the alpha component for drawing zones
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._voxelBounds">
            <summary>
            An array holding all of the bounding rectangles to draw voxels in
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._tiles">
            <summary>
            The materials for all the voxels
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._meta">
            <summary>
            The metadata for all the voxels
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._neighbourStates">
            <summary>
            The neighbour states for the corresponding voxels
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._width">
            <summary>
            The number of tiles along the x axis
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._height">
            <summary>
            The number of tiles along the y axis
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._graphics">
            <summary>
            The graphics device this terrain is bound to
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._spriteBatch">
            <summary>
            The spritebatch this terrain uses for drawing
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._basicEffect">
            <summary>
            The basic effect for drawing complex geometry
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._zoneFont">
            <summary>
            The font used to render zone tags
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._pixelTex">
            <summary>
            A 1x1 blank texture
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._atlas">
            <summary>
            The texture atlas to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._tileManager">
            <summary>
            The tile manager to use
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._random">
            <summary>
            A random number generator used for random events
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._terrainHeightModifier">
            <summary>
            How far down to shift the terrain
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._updateThread">
            <summary>
            The thread handling tile updating
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._transformColor">
            <summary>
            The transform color to multiply all tiles by
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._seed">
            <summary>
            This level's seed
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._isSinglePlayer">
            <summary>
            True if this is a singleplayer map
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.SPMap._debugging">
            <summary>
            True if this map is in debug mode
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas,System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Single)">
            <summary>
            Creates a new voxel based terrain
            </summary>
            <param name="graphics">The graphics device to bind to</param>
            <param name="zoneFont">The font to use for rendering zone tags</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <param name="width">The width of the map, in tiles</param>
            <param name="height">The height of the map, in tiles</param>
            <param name="seed">The seed to generate the map from, if null will pick a random seed</param>
            <param name="isMPMap">True if this map is bound to an online map</param>
            <param name="terrainHeightModifier">How many blocks to shift the terrain down</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.DefineZone(System.Int32,System.Int32,System.Int32,System.Int32,DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="minX">The minimum X coord (chunk)</param>
            <param name="minY">The minimum Y coord (chunk)</param>
            <param name="maxX">The maximum X coord (chunk)</param>
            <param name="maxY">The maximum Y coord (chunk)</param>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.DefineZone(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="min">The minimum bounds of the zone, in world coords</param>
            <param name="max">The maximum bounds of the zone, in world coords</param>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.DefineZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Defines a zone
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.DeleteZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Deletes a specific zone
            </summary>
            <param name="zone">The zone to delete</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.DeleteZone(System.Int32,System.Int32)">
            <summary>
            Deletes a specific zone
            </summary>
            <param name="x">The X-Coord to delete at</param>
            <param name="y">The Y-Coord to delete at</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.AddPrebuiltZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Handles adding a pre-snapped zone to the zone list
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.AddZone(DoodleEmpires.Engine.Economy.Zoning)">
            <summary>
            Handles adding a pre-snapped zone to the zone list
            </summary>
            <param name="zone">The zone to add</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.SetMeta(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the metadata at the given chunk coords
            </summary>
            <param name="x">The x coordinate (chunk)</param>
            <param name="y">The y coordinate (chunk)</param>
            <param name="meta">The metadata to set to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GetMeta(System.Int32,System.Int32)">
            <summary>
            Gets the metadata at the given chunk coords
            </summary>
            <param name="x">The x coordinate (chunk)</param>
            <param name="y">The y coordinate (chunk)</param>
            <returns>The metadata at the given x and y</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GenTerrain">
            <summary>
            Generates the terrain
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.BuildVoxelBouds">
            <summary>
            Builds all the voxel bounds for this map
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GenTree(System.Int32,System.Int32)">
            <summary>
            Generates a tree at the given x and y
            </summary>
            <param name="x">The x coordinate of the base of the tree</param>
            <param name="y">The y coordinate of the base of the tree</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.UpdateVoxel(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Update the voxel at the given position
            </summary>
            <param name="x">The x co-ordinate to update (Chunk Coords)</param>
            <param name="y">The y co-ordinate to update (Chunk Coords)</param>
            <param name="doNeighbours">True if it should update it's neighbours</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GetNeighbours(System.Int32,System.Int32)">
            <summary>
            Gets the neighbour state for the given position
            </summary>
            <param name="x">The x coord to get (chunk coords)</param>
            <param name="y">The y coord to get (chunk coords)</param>
            <returns>The moore neighbour state for the given block</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.Render(ICamera2D)">
            <summary>
            Renders this voxel terrain
            </summary>
            <param name="camera">The camera to render with</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.IsSolid(System.Int32,System.Int32)">
            <summary>
            Checks if the voxel the given position is solid
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>True is the block at [x,y] is solid</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.IsNotAir(System.Int32,System.Int32)">
            <summary>
            Checks if the voxel the given position is not air
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>True is the block at [x,y] is not air</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.Intersects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks if a rectangle intersects with this voxel map
            </summary>
            <param name="rect">The rectangle to check</param>
            <returns>True if the rectangle intersect this voxel map</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.CheckCollision(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Checks a tile collision at the given tile coords
            </summary>
            <param name="x">The x coordinate to check (chunk)</param>
            <param name="y">The y coordinate to check (chunk)</param>
            <param name="rect">The rectangle to check</param>
            <returns>True if the tile intersects the rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.CanConnect(System.Byte,System.Byte)">
            <summary>
            Checks if two voxel types can connect to each other
            </summary>
            <param name="sourceID">The source ID to check</param>
            <param name="destinationID">The destination ID to check</param>
            <returns>True if they can connect</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.IsInsideOctagon(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks is a point is inside of a octagon
            </summary>
            <param name="xx">The x coordinate of the octagon's centre</param>
            <param name="yy">The y coordinate of the octagon's centre</param>
            <param name="radius">The radius of the octagon</param>
            <param name="x">The x coordinate to check</param>
            <param name="y">The y coordinate to check</param>
            <returns>True if the point is inside of the octagon</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GetPath(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Attempts to find a path between 2 points
            </summary>
            <param name="start">The start position</param>
            <param name="end">The end position</param>
            <returns>A list of grid positions. Note that these need to be translated to world space</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.UpdatePathFinding(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Updates the pathfinding at the given coords
            </summary>
            <param name="x">The x coord (chunk)</param>
            <param name="y">The y coord (chunk)</param>
            <param name="doTopBottom">True if this node is the first level</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.IsPassable(System.Int32,System.Int32)">
            <summary>
            Checks if a given tile may be passable
            </summary>
            <param name="x">The x coord (chunk)</param>
            <param name="y">The y coord (chunk)</param>
            <returns>True if the tile should be passable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.IsPassable(System.Byte)">
            <summary>
            Checks if a given tile may be passable
            </summary>
            <param name="id">The ID of the tile</param>
            <returns>True if the tile should be passable</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.GetMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the voxel material at the given position
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <returns>The material at [x,y]</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.SetTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the voxel material at the given position, should only be called by tile classes
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <param name="id">The material to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.SetTileSafe(System.Int32,System.Int32,System.Byte)">
            <summary>
            Safely sets the voxel material at the given position
            </summary>
            <param name="x">The x co-ordinate to check (Chunk Coords)</param>
            <param name="y">The y co-ordinate to check (Chunk Coords)</param>
            <param name="id">The material to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.SetSphere(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets a sphere to one tile ID
            </summary>
            <param name="x">The x coord of the centre of the circle</param>
            <param name="y">The y coord of the centre of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="value">The tile ID to set</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.SaveToStream(System.IO.Stream)">
            <summary>
            Saves this voxel terrain to a stream
            </summary>
            <param name="stream">The stream to save to</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.ReadFromStream(System.IO.Stream,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_1(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.1
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_2(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.2
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_3(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.3
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_4(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.4
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_5(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.4
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.LoadVersion_0_0_6(System.IO.BinaryReader,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Graphics.GraphicsDevice,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a voxel terrain from the stream using Terrain Version 0.0.4
            </summary>
            <param name="reader">The stream to read from</param>
            <param name="labelFont">The font to use for rendering labels such as zone tags</param>
            <param name="graphics">The graphics device to bind to</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="atlas">The texture atlas to use</param>
            <returns>A voxel terrain loaded from the stream</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.ReadFromMessage(Lidgren.Network.NetIncomingMessage,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont,DoodleEmpires.Engine.Terrain.TileManager,DoodleEmpires.Engine.Utilities.TextureAtlas)">
            <summary>
            Reads a map out of a network message
            </summary>
            <param name="message">The message to read from</param>
            <param name="graphics">The graphics device to bind the level to</param>
            <param name="labelFont">The font to use for drawing labels</param>
            <param name="tileManager">The tile manager to use</param>
            <param name="textureAtlas">The texture atlas to use</param>
            <returns>A map loaded from the message</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Net.SPMap.Dispose">
            <summary>
            Disposes of this object and free's it's resources
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the voxel material at the given x and y
            </summary>
            <param name="x">The x coordinate to set (chunk coords)</param>
            <param name="y">The y coordinate to set (chunk coords)</param>
            <returns>The voxel at (x, y)</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.Graphics">
            <summary>
            Gets the graphics device for this terrain
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.Atlas">
            <summary>
            Gets or sets the texture atlas to use
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.TileManager">
            <summary>
            Gets or sets the tile manager to use
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.WorldWidth">
            <summary>
            Gets the width of the world in world coords
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.WorldHeight">
            <summary>
            Gets the height of the world in world coords
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.Zones">
            <summary>
            Gets a list of zones in this voxel map
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.BackDrop">
            <summary>
            Gets or sets the backdrop texture
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.SinglePlayerMap">
            <summary>
            Gets whether this map is a singleplayer map
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Net.SPMap.Debugging">
            <summary>
            Gets or sets whether this map is in debugging mode
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Net.MooreNeighbours">
            <summary>
            Represents the neighbour states of a voxel
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.None">
            <summary>
            No neighbours are set
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.TM">
            <summary>
            The top middle neighbour is set
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.L">
            <summary>
            The left neighbour is set
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.R">
            <summary>
            The right neighbour is set
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.BM">
            <summary>
            The bottom middle neighbour is set
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.Diag">
            <summary>
            The tile should be a diagonal
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Net.MooreNeighbours.All">
            <summary>
            All 4 sides are set
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.EventExtensions">
            <summary>
            A class for event extensions
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.EventExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Handles raising an event
            </summary>
            <typeparam name="T">The type of the event handler</typeparam>
            <param name="handler">The event handler to use</param>
            <param name="sender">The sending object</param>
            <param name="args">The arguments to use</param>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.FPSManager">
            <summary>
            A static class for getting the framerate
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.FPSManager.MAXIMUM_SAMPLES">
            <summary>
            Gets the number of stored sample frames
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.FPSManager.FrameSpeed">
            <summary>
            The standard frame speed
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.FPSManager.OnDraw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called when the application draws
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.FPSManager.TotalFrames">
            <summary>
            Gets the total number of frames that have been rendered
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.FPSManager.AverageFramesPerSecond">
            <summary>
            Gets the averaged framerate
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.FPSManager.CurrentFramesPerSecond">
            <summary>
            Gets the framerate as according to the current frame time
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.FPSManager.Multiplier">
            <summary>
            Gets a multiplier that synchs tick rate to frame speed
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.SimplexNoise">
            <summary>
            A class for handling simplex noise
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.SimplexNoise.Noise(System.Double,System.Double)">
            <summary>
            Performs 2-Dimensional simplex noise
            </summary>
            <param name="xin">The x-coord to sample</param>
            <param name="yin">The y-coord to sample</param>
            <returns>A vlaue between -1 and 1</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.SimplexNoise.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Performs 3-Dimensional simplex noise
            </summary>
            <param name="xin">The x-coord to sample</param>
            <param name="yin">The y-coord to sample</param>
            <param name="zin">The z-coord to sample</param>
            <returns>A value between -1 and 1</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.SimplexNoise.Noise(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Performs 4-Dimensional simplex noise
            </summary>
            <param name="x">The x-coord to sample</param>
            <param name="y">The y-coord to sample</param>
            <param name="z">The z-coord to sample</param>
            <param name="w">The w-coord to sample</param>
            <returns>A value between -1 and 1</returns>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.Noise">
            <summary>
            A class for generating 1D perlin noise
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.Noise.Persistence">
            <summary>
            The persistance of the noise
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.Noise.Octaves">
            <summary>
            The number of octaves to use, increase for finer/rougher detail
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.Noise.PerlinNoise_1D(System.Single)">
            <summary>
            Performs perlin noise on a 1D plane
            </summary>
            <param name="x">The x-coord to sample</param>
            <returns>A perlin noise sample</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.Noise.Seed">
            <summary>
            Gets or sets the seed to use
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.RectangleF">
            <summary>
            Represents a floating-point rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.RectangleF.X">
            <summary>
            The left side of this rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.RectangleF.Y">
            <summary>
            The top side of this rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.RectangleF.Width">
            <summary>
            The width of this rectangle
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.RectangleF.Height">
            <summary>
            The height of this rectangle
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new floating point rectangle
            </summary>
            <param name="x">The x-coord of the rectangle</param>
            <param name="y">The y-coord of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.op_Equality(DoodleEmpires.Engine.Utilities.RectangleF,DoodleEmpires.Engine.Utilities.RectangleF)">
            <summary>
            Checks equality betweeen 2 rectangles
            </summary>
            <param name="a">The first rectangle to check</param>
            <param name="b">The rectangle to check against</param>
            <returns>True if the rectangles are equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.op_Inequality(DoodleEmpires.Engine.Utilities.RectangleF,DoodleEmpires.Engine.Utilities.RectangleF)">
            <summary>
            Checks inequality betweeen 2 rectangles
            </summary>
            <param name="a">The first rectangle to check</param>
            <param name="b">The rectangle to check against</param>
            <returns>True if the rectangles are not equal</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Checks if this rectangle contains a given point
            </summary>
            <param name="x">The x-coord to check</param>
            <param name="y">The y-coord to check</param>
            <returns>True if this rectangle contains the point</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if this rectangle contains a given point
            </summary>
            <param name="value">The point to check</param>
            <returns>True if this rectangle contains the point</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Contains(Microsoft.Xna.Framework.Point)">
            <summary>
            Checks if this rectangle contains a given point
            </summary>
            <param name="value">The point to check</param>
            <returns>True if this rectangle contains the point</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Contains(DoodleEmpires.Engine.Utilities.RectangleF)">
            <summary>
            Checks if this rectangle fully contains another rectangle
            </summary>
            <param name="value">The rectangle to check</param>
            <returns>True if this rectangle fully contains the other rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Offset(Microsoft.Xna.Framework.Point)">
            <summary>
            Shifts this rectangle by a given amount
            </summary>
            <param name="offset">The point to shift by</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Offset(System.Int32,System.Int32)">
            <summary>
            Shifts this rectangle by a given amount
            </summary>
            <param name="offsetX">The x-offset</param>
            <param name="offsetY">The y-offset</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Shifts this rectangle by a given amount
            </summary>
            <param name="offset">The point to shift by</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Shifts this rectangle by a given amount
            </summary>
            <param name="offsetX">The x-offset</param>
            <param name="offsetY">The y-offset</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this rectangle by a given amount. This value will be apllied on
            both sides of the centre point
            </summary>
            <param name="horizontalValue">The horizontal value to inflate by</param>
            <param name="verticalValue">The vertical value to inflate by</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Equals(DoodleEmpires.Engine.Utilities.RectangleF)">
            <summary>
            Checks if this rectangle is equal to another
            </summary>
            <param name="other">The rectangle to check against</param>
            <returns>True if both rectangles has the same values</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Equals(System.Object)">
            <summary>
            Checks if this rectangle is equal to another object
            </summary>
            <param name="obj">The object to check against</param>
            <returns>True if this rectangle is equal to the object</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.ToString">
            <summary>
            Creates a string representation of this rectangle
            </summary>
            <returns>A string representation of this rectangle</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.GetHashCode">
            <summary>
            Gets an integer hash code representing this rectangle
            </summary>
            <returns>A unique hash code</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Intersects(DoodleEmpires.Engine.Utilities.RectangleF)">
            <summary>
            Checks if this rectangle intersects another rectangle
            </summary>
            <param name="r2">The rectangle to check intersection against</param>
            <returns>True if the two triangles intersect</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.RectangleF.Intersects(DoodleEmpires.Engine.Utilities.RectangleF@,System.Boolean@)">
            <summary>
            Checks if this rectangle intersects another rectangle
            </summary>
            <param name="value">The rectangle to check intersection against</param>
            <param name="result">The bool to set true or false</param>
            <returns>True if the two triangles intersect</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Empty">
            <summary>
            Gets a blank rectangle with all properties set to zero
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Left">
            <summary>
            Gets the left bound of this rectangle
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Right">
            <summary>
            Gets the right bound of this rectangle
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Top">
            <summary>
            Gets the top bound of this rectangle
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Bottom">
            <summary>
            Gets the bottom bound of this rectangle
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.Center">
            <summary>
            Gets the centre of this rectangle
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.RectangleF.IsEmpty">
            <summary>
            Gets whether this rectangle has a width and height of 0
            </summary>
        </member>
        <member name="T:DoodleEmpires.Engine.Utilities.TextureAtlas">
            <summary>
            Represents a texture handler that can supply source bounds from a texture atlas
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.TextureAtlas._texture">
            <summary>
            The source texture for this atlas
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.TextureAtlas._sources">
            <summary>
            The source rectangles for this atlas
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.TextureAtlas._xTexs">
            <summary>
            The number of textures along the x axis
            </summary>
        </member>
        <member name="F:DoodleEmpires.Engine.Utilities.TextureAtlas._yTexs">
            <summary>
            The number of textures along the y axis
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.TextureAtlas.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
            <summary>
            Creates a new texture atlas
            </summary>
            <param name="texture">The texture to bind to</param>
            <param name="xTexs">The number of textures along the horizontal axis</param>
            <param name="yTexs">The number of textures along the vertical axis</param>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.TextureAtlas.BuildSources">
            <summary>
            Builds the source rectangles
            </summary>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.TextureAtlas.GetSource(System.Int32)">
            <summary>
            Gets a source rectangle for the given texture ID
            </summary>
            <param name="ID">The texture ID to search for</param>
            <returns>The source rectangle for the given ID</returns>
        </member>
        <member name="M:DoodleEmpires.Engine.Utilities.TextureAtlas.GetTextures(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Breaks this texture atlas into a series of sub-textures
            </summary>
            <param name="graphics">The graphics device to bind the textures to</param>
            <returns>An array of textures</returns>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.TextureAtlas.Texture">
            <summary>
            Gets the texture that this atlas is bound to
            </summary>
        </member>
        <member name="P:DoodleEmpires.Engine.Utilities.TextureAtlas.Item(System.Int32)">
            <summary>
            Gets a source rectangle for the given texture ID
            </summary>
            <param name="ID">The texture ID to search for</param>
            <returns>The source rectangle for the given ID</returns>
        </member>
        <member name="T:DoodleEmpires.Program">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:DoodleEmpires.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:DoodleEmpires.Program.RunServer">
            <summary>
            Runs a game server
            </summary>
        </member>
    </members>
</doc>
